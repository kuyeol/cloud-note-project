// @ts-nocheck
// This file is generated by Umi automatically
// DO NOT CHANGE IT MANUALLY!
// This will bundle all the site demos and meta data into one file
// which should only async load on search
import { getRouteMetaById } from './route-meta';
import { demoIndexes } from './demos';
import { filesFrontmatter } from './frontmatter';

// generate demos data in runtime, for reuse route.id to reduce bundle size
export const demos = {};

/** @private Internal usage. Safe to refactor. */
export async function loadFilesMeta(idList: string[]) {
  const metaMap: Record<string, any> = {};

  if (idList.includes('theme-editor-cn/index')) {
    metaMap['theme-editor-cn/index'] = async () => {
      const routeMeta = await getRouteMetaById('theme-editor-cn/index');
      const demo = await demoIndexes['theme-editor-cn/index']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['theme-editor-cn/index'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('theme-editor/index')) {
    metaMap['theme-editor/index'] = async () => {
      const routeMeta = await getRouteMetaById('theme-editor/index');
      const demo = await demoIndexes['theme-editor/index']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['theme-editor/index'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('index-cn/index')) {
    metaMap['index-cn/index'] = async () => {
      const routeMeta = await getRouteMetaById('index-cn/index');
      const demo = await demoIndexes['index-cn/index']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['index-cn/index'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('index/index')) {
    metaMap['index/index'] = async () => {
      const routeMeta = await getRouteMetaById('index/index');
      const demo = await demoIndexes['index/index']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['index/index'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('docs/blog/contributor-development-maintenance-guide.en-US')) {
    metaMap['docs/blog/contributor-development-maintenance-guide.en-US'] = async () => {
      const routeMeta = await getRouteMetaById('docs/blog/contributor-development-maintenance-guide.en-US');
      const demo = await demoIndexes['docs/blog/contributor-development-maintenance-guide.en-US']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['docs/blog/contributor-development-maintenance-guide.en-US'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('docs/blog/contributor-development-maintenance-guide.zh-CN')) {
    metaMap['docs/blog/contributor-development-maintenance-guide.zh-CN'] = async () => {
      const routeMeta = await getRouteMetaById('docs/blog/contributor-development-maintenance-guide.zh-CN');
      const demo = await demoIndexes['docs/blog/contributor-development-maintenance-guide.zh-CN']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['docs/blog/contributor-development-maintenance-guide.zh-CN'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('docs/spec/research-message-and-feedback.en-US')) {
    metaMap['docs/spec/research-message-and-feedback.en-US'] = async () => {
      const routeMeta = await getRouteMetaById('docs/spec/research-message-and-feedback.en-US');
      const demo = await demoIndexes['docs/spec/research-message-and-feedback.en-US']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['docs/spec/research-message-and-feedback.en-US'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('docs/spec/research-message-and-feedback.zh-CN')) {
    metaMap['docs/spec/research-message-and-feedback.zh-CN'] = async () => {
      const routeMeta = await getRouteMetaById('docs/spec/research-message-and-feedback.zh-CN');
      const demo = await demoIndexes['docs/spec/research-message-and-feedback.zh-CN']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['docs/spec/research-message-and-feedback.zh-CN'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('docs/react/use-with-create-react-app.en-US')) {
    metaMap['docs/react/use-with-create-react-app.en-US'] = async () => {
      const routeMeta = await getRouteMetaById('docs/react/use-with-create-react-app.en-US');
      const demo = await demoIndexes['docs/react/use-with-create-react-app.en-US']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['docs/react/use-with-create-react-app.en-US'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('docs/react/use-with-create-react-app.zh-CN')) {
    metaMap['docs/react/use-with-create-react-app.zh-CN'] = async () => {
      const routeMeta = await getRouteMetaById('docs/react/use-with-create-react-app.zh-CN');
      const demo = await demoIndexes['docs/react/use-with-create-react-app.zh-CN']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['docs/react/use-with-create-react-app.zh-CN'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('docs/react/use-custom-date-library.en-US')) {
    metaMap['docs/react/use-custom-date-library.en-US'] = async () => {
      const routeMeta = await getRouteMetaById('docs/react/use-custom-date-library.en-US');
      const demo = await demoIndexes['docs/react/use-custom-date-library.en-US']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['docs/react/use-custom-date-library.en-US'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('docs/react/use-custom-date-library.zh-CN')) {
    metaMap['docs/react/use-custom-date-library.zh-CN'] = async () => {
      const routeMeta = await getRouteMetaById('docs/react/use-custom-date-library.zh-CN');
      const demo = await demoIndexes['docs/react/use-custom-date-library.zh-CN']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['docs/react/use-custom-date-library.zh-CN'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('docs/blog/github-actions-workflow.en-US')) {
    metaMap['docs/blog/github-actions-workflow.en-US'] = async () => {
      const routeMeta = await getRouteMetaById('docs/blog/github-actions-workflow.en-US');
      const demo = await demoIndexes['docs/blog/github-actions-workflow.en-US']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['docs/blog/github-actions-workflow.en-US'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('docs/blog/github-actions-workflow.zh-CN')) {
    metaMap['docs/blog/github-actions-workflow.zh-CN'] = async () => {
      const routeMeta = await getRouteMetaById('docs/blog/github-actions-workflow.zh-CN');
      const demo = await demoIndexes['docs/blog/github-actions-workflow.zh-CN']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['docs/blog/github-actions-workflow.zh-CN'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('docs/react/migrate-less-variables.en-US')) {
    metaMap['docs/react/migrate-less-variables.en-US'] = async () => {
      const routeMeta = await getRouteMetaById('docs/react/migrate-less-variables.en-US');
      const demo = await demoIndexes['docs/react/migrate-less-variables.en-US']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['docs/react/migrate-less-variables.en-US'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('docs/react/migrate-less-variables.zh-CN')) {
    metaMap['docs/react/migrate-less-variables.zh-CN'] = async () => {
      const routeMeta = await getRouteMetaById('docs/react/migrate-less-variables.zh-CN');
      const demo = await demoIndexes['docs/react/migrate-less-variables.zh-CN']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['docs/react/migrate-less-variables.zh-CN'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('docs/react/server-side-rendering.en-US')) {
    metaMap['docs/react/server-side-rendering.en-US'] = async () => {
      const routeMeta = await getRouteMetaById('docs/react/server-side-rendering.en-US');
      const demo = await demoIndexes['docs/react/server-side-rendering.en-US']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['docs/react/server-side-rendering.en-US'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('docs/react/server-side-rendering.zh-CN')) {
    metaMap['docs/react/server-side-rendering.zh-CN'] = async () => {
      const routeMeta = await getRouteMetaById('docs/react/server-side-rendering.zh-CN');
      const demo = await demoIndexes['docs/react/server-side-rendering.zh-CN']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['docs/react/server-side-rendering.zh-CN'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('docs/blog/config-provider-style.en-US')) {
    metaMap['docs/blog/config-provider-style.en-US'] = async () => {
      const routeMeta = await getRouteMetaById('docs/blog/config-provider-style.en-US');
      const demo = await demoIndexes['docs/blog/config-provider-style.en-US']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['docs/blog/config-provider-style.en-US'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('docs/blog/config-provider-style.zh-CN')) {
    metaMap['docs/blog/config-provider-style.zh-CN'] = async () => {
      const routeMeta = await getRouteMetaById('docs/blog/config-provider-style.zh-CN');
      const demo = await demoIndexes['docs/blog/config-provider-style.zh-CN']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['docs/blog/config-provider-style.zh-CN'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('docs/spec/research-navigation.en-US')) {
    metaMap['docs/spec/research-navigation.en-US'] = async () => {
      const routeMeta = await getRouteMetaById('docs/spec/research-navigation.en-US');
      const demo = await demoIndexes['docs/spec/research-navigation.en-US']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['docs/spec/research-navigation.en-US'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('docs/spec/research-navigation.zh-CN')) {
    metaMap['docs/spec/research-navigation.zh-CN'] = async () => {
      const routeMeta = await getRouteMetaById('docs/spec/research-navigation.zh-CN');
      const demo = await demoIndexes['docs/spec/research-navigation.zh-CN']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['docs/spec/research-navigation.zh-CN'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('docs/blog/mock-project-build.en-US')) {
    metaMap['docs/blog/mock-project-build.en-US'] = async () => {
      const routeMeta = await getRouteMetaById('docs/blog/mock-project-build.en-US');
      const demo = await demoIndexes['docs/blog/mock-project-build.en-US']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['docs/blog/mock-project-build.en-US'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('docs/blog/mock-project-build.zh-CN')) {
    metaMap['docs/blog/mock-project-build.zh-CN'] = async () => {
      const routeMeta = await getRouteMetaById('docs/blog/mock-project-build.zh-CN');
      const demo = await demoIndexes['docs/blog/mock-project-build.zh-CN']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['docs/blog/mock-project-build.zh-CN'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('docs/blog/notification-stack.en-US')) {
    metaMap['docs/blog/notification-stack.en-US'] = async () => {
      const routeMeta = await getRouteMetaById('docs/blog/notification-stack.en-US');
      const demo = await demoIndexes['docs/blog/notification-stack.en-US']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['docs/blog/notification-stack.en-US'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('docs/blog/notification-stack.zh-CN')) {
    metaMap['docs/blog/notification-stack.zh-CN'] = async () => {
      const routeMeta = await getRouteMetaById('docs/blog/notification-stack.zh-CN');
      const demo = await demoIndexes['docs/blog/notification-stack.zh-CN']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['docs/blog/notification-stack.zh-CN'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('docs/blog/to-be-collaborator.en-US')) {
    metaMap['docs/blog/to-be-collaborator.en-US'] = async () => {
      const routeMeta = await getRouteMetaById('docs/blog/to-be-collaborator.en-US');
      const demo = await demoIndexes['docs/blog/to-be-collaborator.en-US']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['docs/blog/to-be-collaborator.en-US'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('docs/blog/to-be-collaborator.zh-CN')) {
    metaMap['docs/blog/to-be-collaborator.zh-CN'] = async () => {
      const routeMeta = await getRouteMetaById('docs/blog/to-be-collaborator.zh-CN');
      const demo = await demoIndexes['docs/blog/to-be-collaborator.zh-CN']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['docs/blog/to-be-collaborator.zh-CN'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('docs/blog/to-be-what-you-see.en-US')) {
    metaMap['docs/blog/to-be-what-you-see.en-US'] = async () => {
      const routeMeta = await getRouteMetaById('docs/blog/to-be-what-you-see.en-US');
      const demo = await demoIndexes['docs/blog/to-be-what-you-see.en-US']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['docs/blog/to-be-what-you-see.en-US'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('docs/blog/to-be-what-you-see.zh-CN')) {
    metaMap['docs/blog/to-be-what-you-see.zh-CN'] = async () => {
      const routeMeta = await getRouteMetaById('docs/blog/to-be-what-you-see.zh-CN');
      const demo = await demoIndexes['docs/blog/to-be-what-you-see.zh-CN']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['docs/blog/to-be-what-you-see.zh-CN'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('docs/spec/research-exception.en-US')) {
    metaMap['docs/spec/research-exception.en-US'] = async () => {
      const routeMeta = await getRouteMetaById('docs/spec/research-exception.en-US');
      const demo = await demoIndexes['docs/spec/research-exception.en-US']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['docs/spec/research-exception.en-US'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('docs/spec/research-exception.zh-CN')) {
    metaMap['docs/spec/research-exception.zh-CN'] = async () => {
      const routeMeta = await getRouteMetaById('docs/spec/research-exception.zh-CN');
      const demo = await demoIndexes['docs/spec/research-exception.zh-CN']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['docs/spec/research-exception.zh-CN'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('docs/spec/research-workbench.en-US')) {
    metaMap['docs/spec/research-workbench.en-US'] = async () => {
      const routeMeta = await getRouteMetaById('docs/spec/research-workbench.en-US');
      const demo = await demoIndexes['docs/spec/research-workbench.en-US']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['docs/spec/research-workbench.en-US'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('docs/spec/research-workbench.zh-CN')) {
    metaMap['docs/spec/research-workbench.zh-CN'] = async () => {
      const routeMeta = await getRouteMetaById('docs/spec/research-workbench.zh-CN');
      const demo = await demoIndexes['docs/spec/research-workbench.zh-CN']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['docs/spec/research-workbench.zh-CN'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('docs/spec/visualization-page.en-US')) {
    metaMap['docs/spec/visualization-page.en-US'] = async () => {
      const routeMeta = await getRouteMetaById('docs/spec/visualization-page.en-US');
      const demo = await demoIndexes['docs/spec/visualization-page.en-US']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['docs/spec/visualization-page.en-US'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('docs/spec/visualization-page.zh-CN')) {
    metaMap['docs/spec/visualization-page.zh-CN'] = async () => {
      const routeMeta = await getRouteMetaById('docs/spec/visualization-page.zh-CN');
      const demo = await demoIndexes['docs/spec/visualization-page.zh-CN']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['docs/spec/visualization-page.zh-CN'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('docs/react/compatible-style.en-US')) {
    metaMap['docs/react/compatible-style.en-US'] = async () => {
      const routeMeta = await getRouteMetaById('docs/react/compatible-style.en-US');
      const demo = await demoIndexes['docs/react/compatible-style.en-US']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['docs/react/compatible-style.en-US'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('docs/react/compatible-style.zh-CN')) {
    metaMap['docs/react/compatible-style.zh-CN'] = async () => {
      const routeMeta = await getRouteMetaById('docs/react/compatible-style.zh-CN');
      const demo = await demoIndexes['docs/react/compatible-style.zh-CN']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['docs/react/compatible-style.zh-CN'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('docs/spec/research-overview.en-US')) {
    metaMap['docs/spec/research-overview.en-US'] = async () => {
      const routeMeta = await getRouteMetaById('docs/spec/research-overview.en-US');
      const demo = await demoIndexes['docs/spec/research-overview.en-US']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['docs/spec/research-overview.en-US'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('docs/spec/research-overview.zh-CN')) {
    metaMap['docs/spec/research-overview.zh-CN'] = async () => {
      const routeMeta = await getRouteMetaById('docs/spec/research-overview.zh-CN');
      const demo = await demoIndexes['docs/spec/research-overview.zh-CN']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['docs/spec/research-overview.zh-CN'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('docs/blog/modal-hook-order.en-US')) {
    metaMap['docs/blog/modal-hook-order.en-US'] = async () => {
      const routeMeta = await getRouteMetaById('docs/blog/modal-hook-order.en-US');
      const demo = await demoIndexes['docs/blog/modal-hook-order.en-US']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['docs/blog/modal-hook-order.en-US'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('docs/blog/modal-hook-order.zh-CN')) {
    metaMap['docs/blog/modal-hook-order.zh-CN'] = async () => {
      const routeMeta = await getRouteMetaById('docs/blog/modal-hook-order.zh-CN');
      const demo = await demoIndexes['docs/blog/modal-hook-order.zh-CN']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['docs/blog/modal-hook-order.zh-CN'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('docs/react/customize-theme.en-US')) {
    metaMap['docs/react/customize-theme.en-US'] = async () => {
      const routeMeta = await getRouteMetaById('docs/react/customize-theme.en-US');
      const demo = await demoIndexes['docs/react/customize-theme.en-US']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['docs/react/customize-theme.en-US'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('docs/react/customize-theme.zh-CN')) {
    metaMap['docs/react/customize-theme.zh-CN'] = async () => {
      const routeMeta = await getRouteMetaById('docs/react/customize-theme.zh-CN');
      const demo = await demoIndexes['docs/react/customize-theme.zh-CN']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['docs/react/customize-theme.zh-CN'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('docs/react/getting-started.en-US')) {
    metaMap['docs/react/getting-started.en-US'] = async () => {
      const routeMeta = await getRouteMetaById('docs/react/getting-started.en-US');
      const demo = await demoIndexes['docs/react/getting-started.en-US']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['docs/react/getting-started.en-US'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('docs/react/getting-started.zh-CN')) {
    metaMap['docs/react/getting-started.zh-CN'] = async () => {
      const routeMeta = await getRouteMetaById('docs/react/getting-started.zh-CN');
      const demo = await demoIndexes['docs/react/getting-started.zh-CN']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['docs/react/getting-started.zh-CN'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('docs/blog/historical-debt.en-US')) {
    metaMap['docs/blog/historical-debt.en-US'] = async () => {
      const routeMeta = await getRouteMetaById('docs/blog/historical-debt.en-US');
      const demo = await demoIndexes['docs/blog/historical-debt.en-US']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['docs/blog/historical-debt.en-US'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('docs/blog/historical-debt.zh-CN')) {
    metaMap['docs/blog/historical-debt.zh-CN'] = async () => {
      const routeMeta = await getRouteMetaById('docs/blog/historical-debt.zh-CN');
      const demo = await demoIndexes['docs/blog/historical-debt.zh-CN']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['docs/blog/historical-debt.zh-CN'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('docs/blog/hydrate-cssinjs.en-US')) {
    metaMap['docs/blog/hydrate-cssinjs.en-US'] = async () => {
      const routeMeta = await getRouteMetaById('docs/blog/hydrate-cssinjs.en-US');
      const demo = await demoIndexes['docs/blog/hydrate-cssinjs.en-US']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['docs/blog/hydrate-cssinjs.en-US'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('docs/blog/hydrate-cssinjs.zh-CN')) {
    metaMap['docs/blog/hydrate-cssinjs.zh-CN'] = async () => {
      const routeMeta = await getRouteMetaById('docs/blog/hydrate-cssinjs.zh-CN');
      const demo = await demoIndexes['docs/blog/hydrate-cssinjs.zh-CN']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['docs/blog/hydrate-cssinjs.zh-CN'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('docs/blog/testing-migrate.en-US')) {
    metaMap['docs/blog/testing-migrate.en-US'] = async () => {
      const routeMeta = await getRouteMetaById('docs/blog/testing-migrate.en-US');
      const demo = await demoIndexes['docs/blog/testing-migrate.en-US']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['docs/blog/testing-migrate.en-US'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('docs/blog/testing-migrate.zh-CN')) {
    metaMap['docs/blog/testing-migrate.zh-CN'] = async () => {
      const routeMeta = await getRouteMetaById('docs/blog/testing-migrate.zh-CN');
      const demo = await demoIndexes['docs/blog/testing-migrate.zh-CN']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['docs/blog/testing-migrate.zh-CN'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('docs/react/recommendation.en-US')) {
    metaMap['docs/react/recommendation.en-US'] = async () => {
      const routeMeta = await getRouteMetaById('docs/react/recommendation.en-US');
      const demo = await demoIndexes['docs/react/recommendation.en-US']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['docs/react/recommendation.en-US'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('docs/react/recommendation.zh-CN')) {
    metaMap['docs/react/recommendation.zh-CN'] = async () => {
      const routeMeta = await getRouteMetaById('docs/react/recommendation.zh-CN');
      const demo = await demoIndexes['docs/react/recommendation.zh-CN']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['docs/react/recommendation.zh-CN'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('docs/spec/research-result.en-US')) {
    metaMap['docs/spec/research-result.en-US'] = async () => {
      const routeMeta = await getRouteMetaById('docs/spec/research-result.en-US');
      const demo = await demoIndexes['docs/spec/research-result.en-US']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['docs/spec/research-result.en-US'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('docs/spec/research-result.zh-CN')) {
    metaMap['docs/spec/research-result.zh-CN'] = async () => {
      const routeMeta = await getRouteMetaById('docs/spec/research-result.zh-CN');
      const demo = await demoIndexes['docs/spec/research-result.zh-CN']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['docs/spec/research-result.zh-CN'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('docs/blog/why-not-static.en-US')) {
    metaMap['docs/blog/why-not-static.en-US'] = async () => {
      const routeMeta = await getRouteMetaById('docs/blog/why-not-static.en-US');
      const demo = await demoIndexes['docs/blog/why-not-static.en-US']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['docs/blog/why-not-static.en-US'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('docs/blog/why-not-static.zh-CN')) {
    metaMap['docs/blog/why-not-static.zh-CN'] = async () => {
      const routeMeta = await getRouteMetaById('docs/blog/why-not-static.zh-CN');
      const demo = await demoIndexes['docs/blog/why-not-static.zh-CN']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['docs/blog/why-not-static.zh-CN'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('docs/react/use-with-next.en-US')) {
    metaMap['docs/react/use-with-next.en-US'] = async () => {
      const routeMeta = await getRouteMetaById('docs/react/use-with-next.en-US');
      const demo = await demoIndexes['docs/react/use-with-next.en-US']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['docs/react/use-with-next.en-US'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('docs/react/use-with-next.zh-CN')) {
    metaMap['docs/react/use-with-next.zh-CN'] = async () => {
      const routeMeta = await getRouteMetaById('docs/react/use-with-next.zh-CN');
      const demo = await demoIndexes['docs/react/use-with-next.zh-CN']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['docs/react/use-with-next.zh-CN'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('docs/react/use-with-vite.en-US')) {
    metaMap['docs/react/use-with-vite.en-US'] = async () => {
      const routeMeta = await getRouteMetaById('docs/react/use-with-vite.en-US');
      const demo = await demoIndexes['docs/react/use-with-vite.en-US']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['docs/react/use-with-vite.en-US'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('docs/react/use-with-vite.zh-CN')) {
    metaMap['docs/react/use-with-vite.zh-CN'] = async () => {
      const routeMeta = await getRouteMetaById('docs/react/use-with-vite.zh-CN');
      const demo = await demoIndexes['docs/react/use-with-vite.zh-CN']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['docs/react/use-with-vite.zh-CN'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('docs/spec/research-empty.en-US')) {
    metaMap['docs/spec/research-empty.en-US'] = async () => {
      const routeMeta = await getRouteMetaById('docs/spec/research-empty.en-US');
      const demo = await demoIndexes['docs/spec/research-empty.en-US']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['docs/spec/research-empty.en-US'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('docs/spec/research-empty.zh-CN')) {
    metaMap['docs/spec/research-empty.zh-CN'] = async () => {
      const routeMeta = await getRouteMetaById('docs/spec/research-empty.zh-CN');
      const demo = await demoIndexes['docs/spec/research-empty.zh-CN']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['docs/spec/research-empty.zh-CN'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('docs/blog/check-conduct.en-US')) {
    metaMap['docs/blog/check-conduct.en-US'] = async () => {
      const routeMeta = await getRouteMetaById('docs/blog/check-conduct.en-US');
      const demo = await demoIndexes['docs/blog/check-conduct.en-US']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['docs/blog/check-conduct.en-US'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('docs/blog/check-conduct.zh-CN')) {
    metaMap['docs/blog/check-conduct.zh-CN'] = async () => {
      const routeMeta = await getRouteMetaById('docs/blog/check-conduct.zh-CN');
      const demo = await demoIndexes['docs/blog/check-conduct.zh-CN']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['docs/blog/check-conduct.zh-CN'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('docs/blog/tooltip-align.en-US')) {
    metaMap['docs/blog/tooltip-align.en-US'] = async () => {
      const routeMeta = await getRouteMetaById('docs/blog/tooltip-align.en-US');
      const demo = await demoIndexes['docs/blog/tooltip-align.en-US']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['docs/blog/tooltip-align.en-US'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('docs/blog/tooltip-align.zh-CN')) {
    metaMap['docs/blog/tooltip-align.zh-CN'] = async () => {
      const routeMeta = await getRouteMetaById('docs/blog/tooltip-align.zh-CN');
      const demo = await demoIndexes['docs/blog/tooltip-align.zh-CN']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['docs/blog/tooltip-align.zh-CN'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('docs/blog/virtual-table.en-US')) {
    metaMap['docs/blog/virtual-table.en-US'] = async () => {
      const routeMeta = await getRouteMetaById('docs/blog/virtual-table.en-US');
      const demo = await demoIndexes['docs/blog/virtual-table.en-US']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['docs/blog/virtual-table.en-US'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('docs/blog/virtual-table.zh-CN')) {
    metaMap['docs/blog/virtual-table.zh-CN'] = async () => {
      const routeMeta = await getRouteMetaById('docs/blog/virtual-table.zh-CN');
      const demo = await demoIndexes['docs/blog/virtual-table.zh-CN']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['docs/blog/virtual-table.zh-CN'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('docs/react/common-props.en-US')) {
    metaMap['docs/react/common-props.en-US'] = async () => {
      const routeMeta = await getRouteMetaById('docs/react/common-props.en-US');
      const demo = await demoIndexes['docs/react/common-props.en-US']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['docs/react/common-props.en-US'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('docs/react/common-props.zh-CN')) {
    metaMap['docs/react/common-props.zh-CN'] = async () => {
      const routeMeta = await getRouteMetaById('docs/react/common-props.zh-CN');
      const demo = await demoIndexes['docs/react/common-props.zh-CN']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['docs/react/common-props.zh-CN'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('docs/react/contributing.en-US')) {
    metaMap['docs/react/contributing.en-US'] = async () => {
      const routeMeta = await getRouteMetaById('docs/react/contributing.en-US');
      const demo = await demoIndexes['docs/react/contributing.en-US']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['docs/react/contributing.en-US'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('docs/react/contributing.zh-CN')) {
    metaMap['docs/react/contributing.zh-CN'] = async () => {
      const routeMeta = await getRouteMetaById('docs/react/contributing.zh-CN');
      const demo = await demoIndexes['docs/react/contributing.zh-CN']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['docs/react/contributing.zh-CN'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('docs/react/migration-v5.en-US')) {
    metaMap['docs/react/migration-v5.en-US'] = async () => {
      const routeMeta = await getRouteMetaById('docs/react/migration-v5.en-US');
      const demo = await demoIndexes['docs/react/migration-v5.en-US']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['docs/react/migration-v5.en-US'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('docs/react/migration-v5.zh-CN')) {
    metaMap['docs/react/migration-v5.zh-CN'] = async () => {
      const routeMeta = await getRouteMetaById('docs/react/migration-v5.zh-CN');
      const demo = await demoIndexes['docs/react/migration-v5.zh-CN']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['docs/react/migration-v5.zh-CN'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('docs/react/use-with-umi.en-US')) {
    metaMap['docs/react/use-with-umi.en-US'] = async () => {
      const routeMeta = await getRouteMetaById('docs/react/use-with-umi.en-US');
      const demo = await demoIndexes['docs/react/use-with-umi.en-US']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['docs/react/use-with-umi.en-US'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('docs/react/use-with-umi.zh-CN')) {
    metaMap['docs/react/use-with-umi.zh-CN'] = async () => {
      const routeMeta = await getRouteMetaById('docs/react/use-with-umi.zh-CN');
      const demo = await demoIndexes['docs/react/use-with-umi.zh-CN']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['docs/react/use-with-umi.zh-CN'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('docs/spec/research-form.en-US')) {
    metaMap['docs/spec/research-form.en-US'] = async () => {
      const routeMeta = await getRouteMetaById('docs/spec/research-form.en-US');
      const demo = await demoIndexes['docs/spec/research-form.en-US']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['docs/spec/research-form.en-US'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('docs/spec/research-form.zh-CN')) {
    metaMap['docs/spec/research-form.zh-CN'] = async () => {
      const routeMeta = await getRouteMetaById('docs/spec/research-form.zh-CN');
      const demo = await demoIndexes['docs/spec/research-form.zh-CN']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['docs/spec/research-form.zh-CN'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('docs/spec/research-list.en-US')) {
    metaMap['docs/spec/research-list.en-US'] = async () => {
      const routeMeta = await getRouteMetaById('docs/spec/research-list.en-US');
      const demo = await demoIndexes['docs/spec/research-list.en-US']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['docs/spec/research-list.en-US'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('docs/spec/research-list.zh-CN')) {
    metaMap['docs/spec/research-list.zh-CN'] = async () => {
      const routeMeta = await getRouteMetaById('docs/spec/research-list.zh-CN');
      const demo = await demoIndexes['docs/spec/research-list.zh-CN']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['docs/spec/research-list.zh-CN'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('docs/blog/color-picker.en-US')) {
    metaMap['docs/blog/color-picker.en-US'] = async () => {
      const routeMeta = await getRouteMetaById('docs/blog/color-picker.en-US');
      const demo = await demoIndexes['docs/blog/color-picker.en-US']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['docs/blog/color-picker.en-US'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('docs/blog/color-picker.zh-CN')) {
    metaMap['docs/blog/color-picker.zh-CN'] = async () => {
      const routeMeta = await getRouteMetaById('docs/blog/color-picker.zh-CN');
      const demo = await demoIndexes['docs/blog/color-picker.zh-CN']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['docs/blog/color-picker.zh-CN'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('docs/blog/getContainer.en-US')) {
    metaMap['docs/blog/getContainer.en-US'] = async () => {
      const routeMeta = await getRouteMetaById('docs/blog/getContainer.en-US');
      const demo = await demoIndexes['docs/blog/getContainer.en-US']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['docs/blog/getContainer.en-US'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('docs/blog/getContainer.zh-CN')) {
    metaMap['docs/blog/getContainer.zh-CN'] = async () => {
      const routeMeta = await getRouteMetaById('docs/blog/getContainer.zh-CN');
      const demo = await demoIndexes['docs/blog/getContainer.zh-CN']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['docs/blog/getContainer.zh-CN'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('docs/blog/issue-helper.en-US')) {
    metaMap['docs/blog/issue-helper.en-US'] = async () => {
      const routeMeta = await getRouteMetaById('docs/blog/issue-helper.en-US');
      const demo = await demoIndexes['docs/blog/issue-helper.en-US']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['docs/blog/issue-helper.en-US'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('docs/blog/issue-helper.zh-CN')) {
    metaMap['docs/blog/issue-helper.zh-CN'] = async () => {
      const routeMeta = await getRouteMetaById('docs/blog/issue-helper.zh-CN');
      const demo = await demoIndexes['docs/blog/issue-helper.zh-CN']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['docs/blog/issue-helper.zh-CN'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('docs/blog/render-times.en-US')) {
    metaMap['docs/blog/render-times.en-US'] = async () => {
      const routeMeta = await getRouteMetaById('docs/blog/render-times.en-US');
      const demo = await demoIndexes['docs/blog/render-times.en-US']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['docs/blog/render-times.en-US'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('docs/blog/render-times.zh-CN')) {
    metaMap['docs/blog/render-times.zh-CN'] = async () => {
      const routeMeta = await getRouteMetaById('docs/blog/render-times.zh-CN');
      const demo = await demoIndexes['docs/blog/render-times.zh-CN']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['docs/blog/render-times.zh-CN'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('docs/blog/tree-shaking.en-US')) {
    metaMap['docs/blog/tree-shaking.en-US'] = async () => {
      const routeMeta = await getRouteMetaById('docs/blog/tree-shaking.en-US');
      const demo = await demoIndexes['docs/blog/tree-shaking.en-US']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['docs/blog/tree-shaking.en-US'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('docs/blog/tree-shaking.zh-CN')) {
    metaMap['docs/blog/tree-shaking.zh-CN'] = async () => {
      const routeMeta = await getRouteMetaById('docs/blog/tree-shaking.zh-CN');
      const demo = await demoIndexes['docs/blog/tree-shaking.zh-CN']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['docs/blog/tree-shaking.zh-CN'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('docs/spec/data-display.en-US')) {
    metaMap['docs/spec/data-display.en-US'] = async () => {
      const routeMeta = await getRouteMetaById('docs/spec/data-display.en-US');
      const demo = await demoIndexes['docs/spec/data-display.en-US']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['docs/spec/data-display.en-US'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('docs/spec/data-display.zh-CN')) {
    metaMap['docs/spec/data-display.zh-CN'] = async () => {
      const routeMeta = await getRouteMetaById('docs/spec/data-display.zh-CN');
      const demo = await demoIndexes['docs/spec/data-display.zh-CN']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['docs/spec/data-display.zh-CN'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('docs/spec/illustration.en-US')) {
    metaMap['docs/spec/illustration.en-US'] = async () => {
      const routeMeta = await getRouteMetaById('docs/spec/illustration.en-US');
      const demo = await demoIndexes['docs/spec/illustration.en-US']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['docs/spec/illustration.en-US'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('docs/spec/illustration.zh-CN')) {
    metaMap['docs/spec/illustration.zh-CN'] = async () => {
      const routeMeta = await getRouteMetaById('docs/spec/illustration.zh-CN');
      const demo = await demoIndexes['docs/spec/illustration.zh-CN']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['docs/spec/illustration.zh-CN'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('docs/blog/extract-ssr.en-US')) {
    metaMap['docs/blog/extract-ssr.en-US'] = async () => {
      const routeMeta = await getRouteMetaById('docs/blog/extract-ssr.en-US');
      const demo = await demoIndexes['docs/blog/extract-ssr.en-US']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['docs/blog/extract-ssr.en-US'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('docs/blog/extract-ssr.zh-CN')) {
    metaMap['docs/blog/extract-ssr.zh-CN'] = async () => {
      const routeMeta = await getRouteMetaById('docs/blog/extract-ssr.zh-CN');
      const demo = await demoIndexes['docs/blog/extract-ssr.zh-CN']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['docs/blog/extract-ssr.zh-CN'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('docs/spec/copywriting.en-US')) {
    metaMap['docs/spec/copywriting.en-US'] = async () => {
      const routeMeta = await getRouteMetaById('docs/spec/copywriting.en-US');
      const demo = await demoIndexes['docs/spec/copywriting.en-US']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['docs/spec/copywriting.en-US'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('docs/spec/copywriting.zh-CN')) {
    metaMap['docs/spec/copywriting.zh-CN'] = async () => {
      const routeMeta = await getRouteMetaById('docs/spec/copywriting.zh-CN');
      const demo = await demoIndexes['docs/spec/copywriting.zh-CN']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['docs/spec/copywriting.zh-CN'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('docs/spec/data-format.en-US')) {
    metaMap['docs/spec/data-format.en-US'] = async () => {
      const routeMeta = await getRouteMetaById('docs/spec/data-format.en-US');
      const demo = await demoIndexes['docs/spec/data-format.en-US']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['docs/spec/data-format.en-US'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('docs/spec/data-format.zh-CN')) {
    metaMap['docs/spec/data-format.zh-CN'] = async () => {
      const routeMeta = await getRouteMetaById('docs/spec/data-format.zh-CN');
      const demo = await demoIndexes['docs/spec/data-format.zh-CN']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['docs/spec/data-format.zh-CN'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('docs/spec/detail-page.en-US')) {
    metaMap['docs/spec/detail-page.en-US'] = async () => {
      const routeMeta = await getRouteMetaById('docs/spec/detail-page.en-US');
      const demo = await demoIndexes['docs/spec/detail-page.en-US']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['docs/spec/detail-page.en-US'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('docs/spec/detail-page.zh-CN')) {
    metaMap['docs/spec/detail-page.zh-CN'] = async () => {
      const routeMeta = await getRouteMetaById('docs/spec/detail-page.zh-CN');
      const demo = await demoIndexes['docs/spec/detail-page.zh-CN']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['docs/spec/detail-page.zh-CN'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('docs/spec/lightweight.en-US')) {
    metaMap['docs/spec/lightweight.en-US'] = async () => {
      const routeMeta = await getRouteMetaById('docs/spec/lightweight.en-US');
      const demo = await demoIndexes['docs/spec/lightweight.en-US']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['docs/spec/lightweight.en-US'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('docs/spec/lightweight.zh-CN')) {
    metaMap['docs/spec/lightweight.zh-CN'] = async () => {
      const routeMeta = await getRouteMetaById('docs/spec/lightweight.zh-CN');
      const demo = await demoIndexes['docs/spec/lightweight.zh-CN']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['docs/spec/lightweight.zh-CN'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('docs/blog/happy-work.en-US')) {
    metaMap['docs/blog/happy-work.en-US'] = async () => {
      const routeMeta = await getRouteMetaById('docs/blog/happy-work.en-US');
      const demo = await demoIndexes['docs/blog/happy-work.en-US']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['docs/blog/happy-work.en-US'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('docs/blog/happy-work.zh-CN')) {
    metaMap['docs/blog/happy-work.zh-CN'] = async () => {
      const routeMeta = await getRouteMetaById('docs/blog/happy-work.zh-CN');
      const demo = await demoIndexes['docs/blog/happy-work.zh-CN']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['docs/blog/happy-work.zh-CN'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('docs/react/introduce.en-US')) {
    metaMap['docs/react/introduce.en-US'] = async () => {
      const routeMeta = await getRouteMetaById('docs/react/introduce.en-US');
      const demo = await demoIndexes['docs/react/introduce.en-US']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['docs/react/introduce.en-US'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('docs/react/introduce.zh-CN')) {
    metaMap['docs/react/introduce.zh-CN'] = async () => {
      const routeMeta = await getRouteMetaById('docs/react/introduce.zh-CN');
      const demo = await demoIndexes['docs/react/introduce.zh-CN']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['docs/react/introduce.zh-CN'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('docs/spec/data-entry.en-US')) {
    metaMap['docs/spec/data-entry.en-US'] = async () => {
      const routeMeta = await getRouteMetaById('docs/spec/data-entry.en-US');
      const demo = await demoIndexes['docs/spec/data-entry.en-US']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['docs/spec/data-entry.en-US'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('docs/spec/data-entry.zh-CN')) {
    metaMap['docs/spec/data-entry.zh-CN'] = async () => {
      const routeMeta = await getRouteMetaById('docs/spec/data-entry.zh-CN');
      const demo = await demoIndexes['docs/spec/data-entry.zh-CN']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['docs/spec/data-entry.zh-CN'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('docs/spec/invitation.en-US')) {
    metaMap['docs/spec/invitation.en-US'] = async () => {
      const routeMeta = await getRouteMetaById('docs/spec/invitation.en-US');
      const demo = await demoIndexes['docs/spec/invitation.en-US']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['docs/spec/invitation.en-US'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('docs/spec/invitation.zh-CN')) {
    metaMap['docs/spec/invitation.zh-CN'] = async () => {
      const routeMeta = await getRouteMetaById('docs/spec/invitation.zh-CN');
      const demo = await demoIndexes['docs/spec/invitation.zh-CN']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['docs/spec/invitation.zh-CN'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('docs/spec/navigation.en-US')) {
    metaMap['docs/spec/navigation.en-US'] = async () => {
      const routeMeta = await getRouteMetaById('docs/spec/navigation.en-US');
      const demo = await demoIndexes['docs/spec/navigation.en-US']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['docs/spec/navigation.en-US'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('docs/spec/navigation.zh-CN')) {
    metaMap['docs/spec/navigation.zh-CN'] = async () => {
      const routeMeta = await getRouteMetaById('docs/spec/navigation.zh-CN');
      const demo = await demoIndexes['docs/spec/navigation.zh-CN']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['docs/spec/navigation.zh-CN'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('docs/spec/repetition.en-US')) {
    metaMap['docs/spec/repetition.en-US'] = async () => {
      const routeMeta = await getRouteMetaById('docs/spec/repetition.en-US');
      const demo = await demoIndexes['docs/spec/repetition.en-US']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['docs/spec/repetition.en-US'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('docs/spec/repetition.zh-CN')) {
    metaMap['docs/spec/repetition.zh-CN'] = async () => {
      const routeMeta = await getRouteMetaById('docs/spec/repetition.zh-CN');
      const demo = await demoIndexes['docs/spec/repetition.zh-CN']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['docs/spec/repetition.zh-CN'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('docs/spec/transition.en-US')) {
    metaMap['docs/spec/transition.en-US'] = async () => {
      const routeMeta = await getRouteMetaById('docs/spec/transition.en-US');
      const demo = await demoIndexes['docs/spec/transition.en-US']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['docs/spec/transition.en-US'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('docs/spec/transition.zh-CN')) {
    metaMap['docs/spec/transition.zh-CN'] = async () => {
      const routeMeta = await getRouteMetaById('docs/spec/transition.zh-CN');
      const demo = await demoIndexes['docs/spec/transition.zh-CN']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['docs/spec/transition.zh-CN'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('docs/blog/css-in-js.en-US')) {
    metaMap['docs/blog/css-in-js.en-US'] = async () => {
      const routeMeta = await getRouteMetaById('docs/blog/css-in-js.en-US');
      const demo = await demoIndexes['docs/blog/css-in-js.en-US']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['docs/blog/css-in-js.en-US'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('docs/blog/css-in-js.zh-CN')) {
    metaMap['docs/blog/css-in-js.zh-CN'] = async () => {
      const routeMeta = await getRouteMetaById('docs/blog/css-in-js.zh-CN');
      const demo = await demoIndexes['docs/blog/css-in-js.zh-CN']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['docs/blog/css-in-js.zh-CN'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('docs/spec/alignment.en-US')) {
    metaMap['docs/spec/alignment.en-US'] = async () => {
      const routeMeta = await getRouteMetaById('docs/spec/alignment.en-US');
      const demo = await demoIndexes['docs/spec/alignment.en-US']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['docs/spec/alignment.en-US'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('docs/spec/alignment.zh-CN')) {
    metaMap['docs/spec/alignment.zh-CN'] = async () => {
      const routeMeta = await getRouteMetaById('docs/spec/alignment.zh-CN');
      const demo = await demoIndexes['docs/spec/alignment.zh-CN']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['docs/spec/alignment.zh-CN'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('docs/spec/data-list.en-US')) {
    metaMap['docs/spec/data-list.en-US'] = async () => {
      const routeMeta = await getRouteMetaById('docs/spec/data-list.en-US');
      const demo = await demoIndexes['docs/spec/data-list.en-US']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['docs/spec/data-list.en-US'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('docs/spec/data-list.zh-CN')) {
    metaMap['docs/spec/data-list.zh-CN'] = async () => {
      const routeMeta = await getRouteMetaById('docs/spec/data-list.zh-CN');
      const demo = await demoIndexes['docs/spec/data-list.zh-CN']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['docs/spec/data-list.zh-CN'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('docs/spec/introduce.en-US')) {
    metaMap['docs/spec/introduce.en-US'] = async () => {
      const routeMeta = await getRouteMetaById('docs/spec/introduce.en-US');
      const demo = await demoIndexes['docs/spec/introduce.en-US']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['docs/spec/introduce.en-US'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('docs/spec/introduce.zh-CN')) {
    metaMap['docs/spec/introduce.zh-CN'] = async () => {
      const routeMeta = await getRouteMetaById('docs/spec/introduce.zh-CN');
      const demo = await demoIndexes['docs/spec/introduce.zh-CN']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['docs/spec/introduce.zh-CN'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('docs/spec/proximity.en-US')) {
    metaMap['docs/spec/proximity.en-US'] = async () => {
      const routeMeta = await getRouteMetaById('docs/spec/proximity.en-US');
      const demo = await demoIndexes['docs/spec/proximity.en-US']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['docs/spec/proximity.en-US'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('docs/spec/proximity.zh-CN')) {
    metaMap['docs/spec/proximity.zh-CN'] = async () => {
      const routeMeta = await getRouteMetaById('docs/spec/proximity.zh-CN');
      const demo = await demoIndexes['docs/spec/proximity.zh-CN']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['docs/spec/proximity.zh-CN'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('docs/blog/suspense.en-US')) {
    metaMap['docs/blog/suspense.en-US'] = async () => {
      const routeMeta = await getRouteMetaById('docs/blog/suspense.en-US');
      const demo = await demoIndexes['docs/blog/suspense.en-US']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['docs/blog/suspense.en-US'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('docs/blog/suspense.zh-CN')) {
    metaMap['docs/blog/suspense.zh-CN'] = async () => {
      const routeMeta = await getRouteMetaById('docs/blog/suspense.zh-CN');
      const demo = await demoIndexes['docs/blog/suspense.zh-CN']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['docs/blog/suspense.zh-CN'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('docs/spec/contrast.en-US')) {
    metaMap['docs/spec/contrast.en-US'] = async () => {
      const routeMeta = await getRouteMetaById('docs/spec/contrast.en-US');
      const demo = await demoIndexes['docs/spec/contrast.en-US']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['docs/spec/contrast.en-US'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('docs/spec/contrast.zh-CN')) {
    metaMap['docs/spec/contrast.zh-CN'] = async () => {
      const routeMeta = await getRouteMetaById('docs/spec/contrast.zh-CN');
      const demo = await demoIndexes['docs/spec/contrast.zh-CN']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['docs/spec/contrast.zh-CN'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('docs/spec/feedback.en-US')) {
    metaMap['docs/spec/feedback.en-US'] = async () => {
      const routeMeta = await getRouteMetaById('docs/spec/feedback.en-US');
      const demo = await demoIndexes['docs/spec/feedback.en-US']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['docs/spec/feedback.en-US'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('docs/spec/feedback.zh-CN')) {
    metaMap['docs/spec/feedback.zh-CN'] = async () => {
      const routeMeta = await getRouteMetaById('docs/spec/feedback.zh-CN');
      const demo = await demoIndexes['docs/spec/feedback.zh-CN']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['docs/spec/feedback.zh-CN'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('docs/spec/overview.en-US')) {
    metaMap['docs/spec/overview.en-US'] = async () => {
      const routeMeta = await getRouteMetaById('docs/spec/overview.en-US');
      const demo = await demoIndexes['docs/spec/overview.en-US']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['docs/spec/overview.en-US'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('docs/spec/overview.zh-CN')) {
    metaMap['docs/spec/overview.zh-CN'] = async () => {
      const routeMeta = await getRouteMetaById('docs/spec/overview.zh-CN');
      const demo = await demoIndexes['docs/spec/overview.zh-CN']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['docs/spec/overview.zh-CN'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('docs/spec/reaction.en-US')) {
    metaMap['docs/spec/reaction.en-US'] = async () => {
      const routeMeta = await getRouteMetaById('docs/spec/reaction.en-US');
      const demo = await demoIndexes['docs/spec/reaction.en-US']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['docs/spec/reaction.en-US'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('docs/spec/reaction.zh-CN')) {
    metaMap['docs/spec/reaction.zh-CN'] = async () => {
      const routeMeta = await getRouteMetaById('docs/spec/reaction.zh-CN');
      const demo = await demoIndexes['docs/spec/reaction.zh-CN']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['docs/spec/reaction.zh-CN'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('docs/spec/buttons.en-US')) {
    metaMap['docs/spec/buttons.en-US'] = async () => {
      const routeMeta = await getRouteMetaById('docs/spec/buttons.en-US');
      const demo = await demoIndexes['docs/spec/buttons.en-US']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['docs/spec/buttons.en-US'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('docs/spec/buttons.zh-CN')) {
    metaMap['docs/spec/buttons.zh-CN'] = async () => {
      const routeMeta = await getRouteMetaById('docs/spec/buttons.zh-CN');
      const demo = await demoIndexes['docs/spec/buttons.zh-CN']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['docs/spec/buttons.zh-CN'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('docs/spec/colors.en-US')) {
    metaMap['docs/spec/colors.en-US'] = async () => {
      const routeMeta = await getRouteMetaById('docs/spec/colors.en-US');
      const demo = await demoIndexes['docs/spec/colors.en-US']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['docs/spec/colors.en-US'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('docs/spec/colors.zh-CN')) {
    metaMap['docs/spec/colors.zh-CN'] = async () => {
      const routeMeta = await getRouteMetaById('docs/spec/colors.zh-CN');
      const demo = await demoIndexes['docs/spec/colors.zh-CN']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['docs/spec/colors.zh-CN'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('docs/spec/direct.en-US')) {
    metaMap['docs/spec/direct.en-US'] = async () => {
      const routeMeta = await getRouteMetaById('docs/spec/direct.en-US');
      const demo = await demoIndexes['docs/spec/direct.en-US']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['docs/spec/direct.en-US'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('docs/spec/direct.zh-CN')) {
    metaMap['docs/spec/direct.zh-CN'] = async () => {
      const routeMeta = await getRouteMetaById('docs/spec/direct.zh-CN');
      const demo = await demoIndexes['docs/spec/direct.zh-CN']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['docs/spec/direct.zh-CN'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('docs/spec/layout.en-US')) {
    metaMap['docs/spec/layout.en-US'] = async () => {
      const routeMeta = await getRouteMetaById('docs/spec/layout.en-US');
      const demo = await demoIndexes['docs/spec/layout.en-US']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['docs/spec/layout.en-US'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('docs/spec/layout.zh-CN')) {
    metaMap['docs/spec/layout.zh-CN'] = async () => {
      const routeMeta = await getRouteMetaById('docs/spec/layout.zh-CN');
      const demo = await demoIndexes['docs/spec/layout.zh-CN']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['docs/spec/layout.zh-CN'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('docs/spec/motion.en-US')) {
    metaMap['docs/spec/motion.en-US'] = async () => {
      const routeMeta = await getRouteMetaById('docs/spec/motion.en-US');
      const demo = await demoIndexes['docs/spec/motion.en-US']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['docs/spec/motion.en-US'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('docs/spec/motion.zh-CN')) {
    metaMap['docs/spec/motion.zh-CN'] = async () => {
      const routeMeta = await getRouteMetaById('docs/spec/motion.zh-CN');
      const demo = await demoIndexes['docs/spec/motion.zh-CN']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['docs/spec/motion.zh-CN'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('docs/spec/shadow.en-US')) {
    metaMap['docs/spec/shadow.en-US'] = async () => {
      const routeMeta = await getRouteMetaById('docs/spec/shadow.en-US');
      const demo = await demoIndexes['docs/spec/shadow.en-US']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['docs/spec/shadow.en-US'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('docs/spec/shadow.zh-CN')) {
    metaMap['docs/spec/shadow.zh-CN'] = async () => {
      const routeMeta = await getRouteMetaById('docs/spec/shadow.zh-CN');
      const demo = await demoIndexes['docs/spec/shadow.zh-CN']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['docs/spec/shadow.zh-CN'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('docs/spec/values.en-US')) {
    metaMap['docs/spec/values.en-US'] = async () => {
      const routeMeta = await getRouteMetaById('docs/spec/values.en-US');
      const demo = await demoIndexes['docs/spec/values.en-US']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['docs/spec/values.en-US'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('docs/spec/values.zh-CN')) {
    metaMap['docs/spec/values.zh-CN'] = async () => {
      const routeMeta = await getRouteMetaById('docs/spec/values.zh-CN');
      const demo = await demoIndexes['docs/spec/values.zh-CN']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['docs/spec/values.zh-CN'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('docs/spec/visual.en-US')) {
    metaMap['docs/spec/visual.en-US'] = async () => {
      const routeMeta = await getRouteMetaById('docs/spec/visual.en-US');
      const demo = await demoIndexes['docs/spec/visual.en-US']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['docs/spec/visual.en-US'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('docs/spec/visual.zh-CN')) {
    metaMap['docs/spec/visual.zh-CN'] = async () => {
      const routeMeta = await getRouteMetaById('docs/spec/visual.zh-CN');
      const demo = await demoIndexes['docs/spec/visual.zh-CN']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['docs/spec/visual.zh-CN'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('docs/react/i18n.en-US')) {
    metaMap['docs/react/i18n.en-US'] = async () => {
      const routeMeta = await getRouteMetaById('docs/react/i18n.en-US');
      const demo = await demoIndexes['docs/react/i18n.en-US']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['docs/react/i18n.en-US'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('docs/react/i18n.zh-CN')) {
    metaMap['docs/react/i18n.zh-CN'] = async () => {
      const routeMeta = await getRouteMetaById('docs/react/i18n.zh-CN');
      const demo = await demoIndexes['docs/react/i18n.zh-CN']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['docs/react/i18n.zh-CN'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('docs/spec/cases.en-US')) {
    metaMap['docs/spec/cases.en-US'] = async () => {
      const routeMeta = await getRouteMetaById('docs/spec/cases.en-US');
      const demo = await demoIndexes['docs/spec/cases.en-US']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['docs/spec/cases.en-US'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('docs/spec/cases.zh-CN')) {
    metaMap['docs/spec/cases.zh-CN'] = async () => {
      const routeMeta = await getRouteMetaById('docs/spec/cases.zh-CN');
      const demo = await demoIndexes['docs/spec/cases.zh-CN']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['docs/spec/cases.zh-CN'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('docs/react/faq.en-US')) {
    metaMap['docs/react/faq.en-US'] = async () => {
      const routeMeta = await getRouteMetaById('docs/react/faq.en-US');
      const demo = await demoIndexes['docs/react/faq.en-US']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['docs/react/faq.en-US'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('docs/react/faq.zh-CN')) {
    metaMap['docs/react/faq.zh-CN'] = async () => {
      const routeMeta = await getRouteMetaById('docs/react/faq.zh-CN');
      const demo = await demoIndexes['docs/react/faq.zh-CN']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['docs/react/faq.zh-CN'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('docs/resources.en-US')) {
    metaMap['docs/resources.en-US'] = async () => {
      const routeMeta = await getRouteMetaById('docs/resources.en-US');
      const demo = await demoIndexes['docs/resources.en-US']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['docs/resources.en-US'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('docs/resources.zh-CN')) {
    metaMap['docs/resources.zh-CN'] = async () => {
      const routeMeta = await getRouteMetaById('docs/resources.zh-CN');
      const demo = await demoIndexes['docs/resources.zh-CN']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['docs/resources.zh-CN'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('docs/spec/dark.en-US')) {
    metaMap['docs/spec/dark.en-US'] = async () => {
      const routeMeta = await getRouteMetaById('docs/spec/dark.en-US');
      const demo = await demoIndexes['docs/spec/dark.en-US']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['docs/spec/dark.en-US'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('docs/spec/dark.zh-CN')) {
    metaMap['docs/spec/dark.zh-CN'] = async () => {
      const routeMeta = await getRouteMetaById('docs/spec/dark.zh-CN');
      const demo = await demoIndexes['docs/spec/dark.zh-CN']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['docs/spec/dark.zh-CN'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('docs/spec/font.en-US')) {
    metaMap['docs/spec/font.en-US'] = async () => {
      const routeMeta = await getRouteMetaById('docs/spec/font.en-US');
      const demo = await demoIndexes['docs/spec/font.en-US']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['docs/spec/font.en-US'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('docs/spec/font.zh-CN')) {
    metaMap['docs/spec/font.zh-CN'] = async () => {
      const routeMeta = await getRouteMetaById('docs/spec/font.zh-CN');
      const demo = await demoIndexes['docs/spec/font.zh-CN']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['docs/spec/font.zh-CN'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('docs/spec/icon.en-US')) {
    metaMap['docs/spec/icon.en-US'] = async () => {
      const routeMeta = await getRouteMetaById('docs/spec/icon.en-US');
      const demo = await demoIndexes['docs/spec/icon.en-US']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['docs/spec/icon.en-US'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('docs/spec/icon.zh-CN')) {
    metaMap['docs/spec/icon.zh-CN'] = async () => {
      const routeMeta = await getRouteMetaById('docs/spec/icon.zh-CN');
      const demo = await demoIndexes['docs/spec/icon.zh-CN']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['docs/spec/icon.zh-CN'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('docs/spec/stay.en-US')) {
    metaMap['docs/spec/stay.en-US'] = async () => {
      const routeMeta = await getRouteMetaById('docs/spec/stay.en-US');
      const demo = await demoIndexes['docs/spec/stay.en-US']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['docs/spec/stay.en-US'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('docs/spec/stay.zh-CN')) {
    metaMap['docs/spec/stay.zh-CN'] = async () => {
      const routeMeta = await getRouteMetaById('docs/spec/stay.zh-CN');
      const demo = await demoIndexes['docs/spec/stay.zh-CN']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['docs/spec/stay.zh-CN'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('components/affix/index.en-US')) {
    metaMap['components/affix/index.en-US'] = async () => {
      const routeMeta = await getRouteMetaById('components/affix/index.en-US');
      const demo = await demoIndexes['components/affix/index.en-US']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['components/affix/index.en-US'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('components/affix/index.zh-CN')) {
    metaMap['components/affix/index.zh-CN'] = async () => {
      const routeMeta = await getRouteMetaById('components/affix/index.zh-CN');
      const demo = await demoIndexes['components/affix/index.zh-CN']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['components/affix/index.zh-CN'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('components/alert/index.en-US')) {
    metaMap['components/alert/index.en-US'] = async () => {
      const routeMeta = await getRouteMetaById('components/alert/index.en-US');
      const demo = await demoIndexes['components/alert/index.en-US']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['components/alert/index.en-US'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('components/alert/index.zh-CN')) {
    metaMap['components/alert/index.zh-CN'] = async () => {
      const routeMeta = await getRouteMetaById('components/alert/index.zh-CN');
      const demo = await demoIndexes['components/alert/index.zh-CN']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['components/alert/index.zh-CN'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('components/anchor/index.en-US')) {
    metaMap['components/anchor/index.en-US'] = async () => {
      const routeMeta = await getRouteMetaById('components/anchor/index.en-US');
      const demo = await demoIndexes['components/anchor/index.en-US']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['components/anchor/index.en-US'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('components/anchor/index.zh-CN')) {
    metaMap['components/anchor/index.zh-CN'] = async () => {
      const routeMeta = await getRouteMetaById('components/anchor/index.zh-CN');
      const demo = await demoIndexes['components/anchor/index.zh-CN']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['components/anchor/index.zh-CN'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('components/app/index.en-US')) {
    metaMap['components/app/index.en-US'] = async () => {
      const routeMeta = await getRouteMetaById('components/app/index.en-US');
      const demo = await demoIndexes['components/app/index.en-US']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['components/app/index.en-US'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('components/app/index.zh-CN')) {
    metaMap['components/app/index.zh-CN'] = async () => {
      const routeMeta = await getRouteMetaById('components/app/index.zh-CN');
      const demo = await demoIndexes['components/app/index.zh-CN']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['components/app/index.zh-CN'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('components/auto-complete/index.en-US')) {
    metaMap['components/auto-complete/index.en-US'] = async () => {
      const routeMeta = await getRouteMetaById('components/auto-complete/index.en-US');
      const demo = await demoIndexes['components/auto-complete/index.en-US']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['components/auto-complete/index.en-US'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('components/auto-complete/index.zh-CN')) {
    metaMap['components/auto-complete/index.zh-CN'] = async () => {
      const routeMeta = await getRouteMetaById('components/auto-complete/index.zh-CN');
      const demo = await demoIndexes['components/auto-complete/index.zh-CN']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['components/auto-complete/index.zh-CN'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('components/avatar/index.en-US')) {
    metaMap['components/avatar/index.en-US'] = async () => {
      const routeMeta = await getRouteMetaById('components/avatar/index.en-US');
      const demo = await demoIndexes['components/avatar/index.en-US']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['components/avatar/index.en-US'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('components/avatar/index.zh-CN')) {
    metaMap['components/avatar/index.zh-CN'] = async () => {
      const routeMeta = await getRouteMetaById('components/avatar/index.zh-CN');
      const demo = await demoIndexes['components/avatar/index.zh-CN']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['components/avatar/index.zh-CN'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('components/badge/index.en-US')) {
    metaMap['components/badge/index.en-US'] = async () => {
      const routeMeta = await getRouteMetaById('components/badge/index.en-US');
      const demo = await demoIndexes['components/badge/index.en-US']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['components/badge/index.en-US'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('components/badge/index.zh-CN')) {
    metaMap['components/badge/index.zh-CN'] = async () => {
      const routeMeta = await getRouteMetaById('components/badge/index.zh-CN');
      const demo = await demoIndexes['components/badge/index.zh-CN']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['components/badge/index.zh-CN'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('components/breadcrumb/index.en-US')) {
    metaMap['components/breadcrumb/index.en-US'] = async () => {
      const routeMeta = await getRouteMetaById('components/breadcrumb/index.en-US');
      const demo = await demoIndexes['components/breadcrumb/index.en-US']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['components/breadcrumb/index.en-US'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('components/breadcrumb/index.zh-CN')) {
    metaMap['components/breadcrumb/index.zh-CN'] = async () => {
      const routeMeta = await getRouteMetaById('components/breadcrumb/index.zh-CN');
      const demo = await demoIndexes['components/breadcrumb/index.zh-CN']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['components/breadcrumb/index.zh-CN'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('components/button/index.en-US')) {
    metaMap['components/button/index.en-US'] = async () => {
      const routeMeta = await getRouteMetaById('components/button/index.en-US');
      const demo = await demoIndexes['components/button/index.en-US']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['components/button/index.en-US'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('components/button/index.zh-CN')) {
    metaMap['components/button/index.zh-CN'] = async () => {
      const routeMeta = await getRouteMetaById('components/button/index.zh-CN');
      const demo = await demoIndexes['components/button/index.zh-CN']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['components/button/index.zh-CN'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('components/calendar/index.en-US')) {
    metaMap['components/calendar/index.en-US'] = async () => {
      const routeMeta = await getRouteMetaById('components/calendar/index.en-US');
      const demo = await demoIndexes['components/calendar/index.en-US']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['components/calendar/index.en-US'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('components/calendar/index.zh-CN')) {
    metaMap['components/calendar/index.zh-CN'] = async () => {
      const routeMeta = await getRouteMetaById('components/calendar/index.zh-CN');
      const demo = await demoIndexes['components/calendar/index.zh-CN']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['components/calendar/index.zh-CN'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('components/card/index.en-US')) {
    metaMap['components/card/index.en-US'] = async () => {
      const routeMeta = await getRouteMetaById('components/card/index.en-US');
      const demo = await demoIndexes['components/card/index.en-US']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['components/card/index.en-US'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('components/card/index.zh-CN')) {
    metaMap['components/card/index.zh-CN'] = async () => {
      const routeMeta = await getRouteMetaById('components/card/index.zh-CN');
      const demo = await demoIndexes['components/card/index.zh-CN']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['components/card/index.zh-CN'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('components/carousel/index.en-US')) {
    metaMap['components/carousel/index.en-US'] = async () => {
      const routeMeta = await getRouteMetaById('components/carousel/index.en-US');
      const demo = await demoIndexes['components/carousel/index.en-US']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['components/carousel/index.en-US'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('components/carousel/index.zh-CN')) {
    metaMap['components/carousel/index.zh-CN'] = async () => {
      const routeMeta = await getRouteMetaById('components/carousel/index.zh-CN');
      const demo = await demoIndexes['components/carousel/index.zh-CN']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['components/carousel/index.zh-CN'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('components/cascader/index.en-US')) {
    metaMap['components/cascader/index.en-US'] = async () => {
      const routeMeta = await getRouteMetaById('components/cascader/index.en-US');
      const demo = await demoIndexes['components/cascader/index.en-US']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['components/cascader/index.en-US'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('components/cascader/index.zh-CN')) {
    metaMap['components/cascader/index.zh-CN'] = async () => {
      const routeMeta = await getRouteMetaById('components/cascader/index.zh-CN');
      const demo = await demoIndexes['components/cascader/index.zh-CN']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['components/cascader/index.zh-CN'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('components/checkbox/index.en-US')) {
    metaMap['components/checkbox/index.en-US'] = async () => {
      const routeMeta = await getRouteMetaById('components/checkbox/index.en-US');
      const demo = await demoIndexes['components/checkbox/index.en-US']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['components/checkbox/index.en-US'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('components/checkbox/index.zh-CN')) {
    metaMap['components/checkbox/index.zh-CN'] = async () => {
      const routeMeta = await getRouteMetaById('components/checkbox/index.zh-CN');
      const demo = await demoIndexes['components/checkbox/index.zh-CN']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['components/checkbox/index.zh-CN'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('components/collapse/index.en-US')) {
    metaMap['components/collapse/index.en-US'] = async () => {
      const routeMeta = await getRouteMetaById('components/collapse/index.en-US');
      const demo = await demoIndexes['components/collapse/index.en-US']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['components/collapse/index.en-US'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('components/collapse/index.zh-CN')) {
    metaMap['components/collapse/index.zh-CN'] = async () => {
      const routeMeta = await getRouteMetaById('components/collapse/index.zh-CN');
      const demo = await demoIndexes['components/collapse/index.zh-CN']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['components/collapse/index.zh-CN'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('components/color-picker/index.en-US')) {
    metaMap['components/color-picker/index.en-US'] = async () => {
      const routeMeta = await getRouteMetaById('components/color-picker/index.en-US');
      const demo = await demoIndexes['components/color-picker/index.en-US']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['components/color-picker/index.en-US'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('components/color-picker/index.zh-CN')) {
    metaMap['components/color-picker/index.zh-CN'] = async () => {
      const routeMeta = await getRouteMetaById('components/color-picker/index.zh-CN');
      const demo = await demoIndexes['components/color-picker/index.zh-CN']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['components/color-picker/index.zh-CN'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('components/config-provider/index.en-US')) {
    metaMap['components/config-provider/index.en-US'] = async () => {
      const routeMeta = await getRouteMetaById('components/config-provider/index.en-US');
      const demo = await demoIndexes['components/config-provider/index.en-US']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['components/config-provider/index.en-US'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('components/config-provider/index.zh-CN')) {
    metaMap['components/config-provider/index.zh-CN'] = async () => {
      const routeMeta = await getRouteMetaById('components/config-provider/index.zh-CN');
      const demo = await demoIndexes['components/config-provider/index.zh-CN']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['components/config-provider/index.zh-CN'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('components/date-picker/index.en-US')) {
    metaMap['components/date-picker/index.en-US'] = async () => {
      const routeMeta = await getRouteMetaById('components/date-picker/index.en-US');
      const demo = await demoIndexes['components/date-picker/index.en-US']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['components/date-picker/index.en-US'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('components/date-picker/index.zh-CN')) {
    metaMap['components/date-picker/index.zh-CN'] = async () => {
      const routeMeta = await getRouteMetaById('components/date-picker/index.zh-CN');
      const demo = await demoIndexes['components/date-picker/index.zh-CN']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['components/date-picker/index.zh-CN'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('components/descriptions/index.en-US')) {
    metaMap['components/descriptions/index.en-US'] = async () => {
      const routeMeta = await getRouteMetaById('components/descriptions/index.en-US');
      const demo = await demoIndexes['components/descriptions/index.en-US']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['components/descriptions/index.en-US'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('components/descriptions/index.zh-CN')) {
    metaMap['components/descriptions/index.zh-CN'] = async () => {
      const routeMeta = await getRouteMetaById('components/descriptions/index.zh-CN');
      const demo = await demoIndexes['components/descriptions/index.zh-CN']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['components/descriptions/index.zh-CN'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('components/divider/index.en-US')) {
    metaMap['components/divider/index.en-US'] = async () => {
      const routeMeta = await getRouteMetaById('components/divider/index.en-US');
      const demo = await demoIndexes['components/divider/index.en-US']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['components/divider/index.en-US'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('components/divider/index.zh-CN')) {
    metaMap['components/divider/index.zh-CN'] = async () => {
      const routeMeta = await getRouteMetaById('components/divider/index.zh-CN');
      const demo = await demoIndexes['components/divider/index.zh-CN']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['components/divider/index.zh-CN'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('components/drawer/index.en-US')) {
    metaMap['components/drawer/index.en-US'] = async () => {
      const routeMeta = await getRouteMetaById('components/drawer/index.en-US');
      const demo = await demoIndexes['components/drawer/index.en-US']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['components/drawer/index.en-US'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('components/drawer/index.zh-CN')) {
    metaMap['components/drawer/index.zh-CN'] = async () => {
      const routeMeta = await getRouteMetaById('components/drawer/index.zh-CN');
      const demo = await demoIndexes['components/drawer/index.zh-CN']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['components/drawer/index.zh-CN'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('components/dropdown/index.en-US')) {
    metaMap['components/dropdown/index.en-US'] = async () => {
      const routeMeta = await getRouteMetaById('components/dropdown/index.en-US');
      const demo = await demoIndexes['components/dropdown/index.en-US']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['components/dropdown/index.en-US'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('components/dropdown/index.zh-CN')) {
    metaMap['components/dropdown/index.zh-CN'] = async () => {
      const routeMeta = await getRouteMetaById('components/dropdown/index.zh-CN');
      const demo = await demoIndexes['components/dropdown/index.zh-CN']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['components/dropdown/index.zh-CN'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('components/empty/index.en-US')) {
    metaMap['components/empty/index.en-US'] = async () => {
      const routeMeta = await getRouteMetaById('components/empty/index.en-US');
      const demo = await demoIndexes['components/empty/index.en-US']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['components/empty/index.en-US'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('components/empty/index.zh-CN')) {
    metaMap['components/empty/index.zh-CN'] = async () => {
      const routeMeta = await getRouteMetaById('components/empty/index.zh-CN');
      const demo = await demoIndexes['components/empty/index.zh-CN']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['components/empty/index.zh-CN'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('components/flex/index.en-US')) {
    metaMap['components/flex/index.en-US'] = async () => {
      const routeMeta = await getRouteMetaById('components/flex/index.en-US');
      const demo = await demoIndexes['components/flex/index.en-US']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['components/flex/index.en-US'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('components/flex/index.zh-CN')) {
    metaMap['components/flex/index.zh-CN'] = async () => {
      const routeMeta = await getRouteMetaById('components/flex/index.zh-CN');
      const demo = await demoIndexes['components/flex/index.zh-CN']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['components/flex/index.zh-CN'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('components/float-button/index.en-US')) {
    metaMap['components/float-button/index.en-US'] = async () => {
      const routeMeta = await getRouteMetaById('components/float-button/index.en-US');
      const demo = await demoIndexes['components/float-button/index.en-US']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['components/float-button/index.en-US'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('components/float-button/index.zh-CN')) {
    metaMap['components/float-button/index.zh-CN'] = async () => {
      const routeMeta = await getRouteMetaById('components/float-button/index.zh-CN');
      const demo = await demoIndexes['components/float-button/index.zh-CN']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['components/float-button/index.zh-CN'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('components/form/index.en-US')) {
    metaMap['components/form/index.en-US'] = async () => {
      const routeMeta = await getRouteMetaById('components/form/index.en-US');
      const demo = await demoIndexes['components/form/index.en-US']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['components/form/index.en-US'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('components/form/index.zh-CN')) {
    metaMap['components/form/index.zh-CN'] = async () => {
      const routeMeta = await getRouteMetaById('components/form/index.zh-CN');
      const demo = await demoIndexes['components/form/index.zh-CN']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['components/form/index.zh-CN'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('components/grid/index.en-US')) {
    metaMap['components/grid/index.en-US'] = async () => {
      const routeMeta = await getRouteMetaById('components/grid/index.en-US');
      const demo = await demoIndexes['components/grid/index.en-US']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['components/grid/index.en-US'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('components/grid/index.zh-CN')) {
    metaMap['components/grid/index.zh-CN'] = async () => {
      const routeMeta = await getRouteMetaById('components/grid/index.zh-CN');
      const demo = await demoIndexes['components/grid/index.zh-CN']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['components/grid/index.zh-CN'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('components/icon/index.en-US')) {
    metaMap['components/icon/index.en-US'] = async () => {
      const routeMeta = await getRouteMetaById('components/icon/index.en-US');
      const demo = await demoIndexes['components/icon/index.en-US']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['components/icon/index.en-US'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('components/icon/index.zh-CN')) {
    metaMap['components/icon/index.zh-CN'] = async () => {
      const routeMeta = await getRouteMetaById('components/icon/index.zh-CN');
      const demo = await demoIndexes['components/icon/index.zh-CN']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['components/icon/index.zh-CN'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('components/image/index.en-US')) {
    metaMap['components/image/index.en-US'] = async () => {
      const routeMeta = await getRouteMetaById('components/image/index.en-US');
      const demo = await demoIndexes['components/image/index.en-US']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['components/image/index.en-US'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('components/image/index.zh-CN')) {
    metaMap['components/image/index.zh-CN'] = async () => {
      const routeMeta = await getRouteMetaById('components/image/index.zh-CN');
      const demo = await demoIndexes['components/image/index.zh-CN']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['components/image/index.zh-CN'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('components/input-number/index.en-US')) {
    metaMap['components/input-number/index.en-US'] = async () => {
      const routeMeta = await getRouteMetaById('components/input-number/index.en-US');
      const demo = await demoIndexes['components/input-number/index.en-US']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['components/input-number/index.en-US'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('components/input-number/index.zh-CN')) {
    metaMap['components/input-number/index.zh-CN'] = async () => {
      const routeMeta = await getRouteMetaById('components/input-number/index.zh-CN');
      const demo = await demoIndexes['components/input-number/index.zh-CN']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['components/input-number/index.zh-CN'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('components/input/index.en-US')) {
    metaMap['components/input/index.en-US'] = async () => {
      const routeMeta = await getRouteMetaById('components/input/index.en-US');
      const demo = await demoIndexes['components/input/index.en-US']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['components/input/index.en-US'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('components/input/index.zh-CN')) {
    metaMap['components/input/index.zh-CN'] = async () => {
      const routeMeta = await getRouteMetaById('components/input/index.zh-CN');
      const demo = await demoIndexes['components/input/index.zh-CN']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['components/input/index.zh-CN'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('components/layout/index.en-US')) {
    metaMap['components/layout/index.en-US'] = async () => {
      const routeMeta = await getRouteMetaById('components/layout/index.en-US');
      const demo = await demoIndexes['components/layout/index.en-US']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['components/layout/index.en-US'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('components/layout/index.zh-CN')) {
    metaMap['components/layout/index.zh-CN'] = async () => {
      const routeMeta = await getRouteMetaById('components/layout/index.zh-CN');
      const demo = await demoIndexes['components/layout/index.zh-CN']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['components/layout/index.zh-CN'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('components/list/index.en-US')) {
    metaMap['components/list/index.en-US'] = async () => {
      const routeMeta = await getRouteMetaById('components/list/index.en-US');
      const demo = await demoIndexes['components/list/index.en-US']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['components/list/index.en-US'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('components/list/index.zh-CN')) {
    metaMap['components/list/index.zh-CN'] = async () => {
      const routeMeta = await getRouteMetaById('components/list/index.zh-CN');
      const demo = await demoIndexes['components/list/index.zh-CN']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['components/list/index.zh-CN'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('components/mentions/index.en-US')) {
    metaMap['components/mentions/index.en-US'] = async () => {
      const routeMeta = await getRouteMetaById('components/mentions/index.en-US');
      const demo = await demoIndexes['components/mentions/index.en-US']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['components/mentions/index.en-US'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('components/mentions/index.zh-CN')) {
    metaMap['components/mentions/index.zh-CN'] = async () => {
      const routeMeta = await getRouteMetaById('components/mentions/index.zh-CN');
      const demo = await demoIndexes['components/mentions/index.zh-CN']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['components/mentions/index.zh-CN'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('components/menu/index.en-US')) {
    metaMap['components/menu/index.en-US'] = async () => {
      const routeMeta = await getRouteMetaById('components/menu/index.en-US');
      const demo = await demoIndexes['components/menu/index.en-US']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['components/menu/index.en-US'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('components/menu/index.zh-CN')) {
    metaMap['components/menu/index.zh-CN'] = async () => {
      const routeMeta = await getRouteMetaById('components/menu/index.zh-CN');
      const demo = await demoIndexes['components/menu/index.zh-CN']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['components/menu/index.zh-CN'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('components/message/index.en-US')) {
    metaMap['components/message/index.en-US'] = async () => {
      const routeMeta = await getRouteMetaById('components/message/index.en-US');
      const demo = await demoIndexes['components/message/index.en-US']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['components/message/index.en-US'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('components/message/index.zh-CN')) {
    metaMap['components/message/index.zh-CN'] = async () => {
      const routeMeta = await getRouteMetaById('components/message/index.zh-CN');
      const demo = await demoIndexes['components/message/index.zh-CN']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['components/message/index.zh-CN'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('components/modal/index.en-US')) {
    metaMap['components/modal/index.en-US'] = async () => {
      const routeMeta = await getRouteMetaById('components/modal/index.en-US');
      const demo = await demoIndexes['components/modal/index.en-US']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['components/modal/index.en-US'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('components/modal/index.zh-CN')) {
    metaMap['components/modal/index.zh-CN'] = async () => {
      const routeMeta = await getRouteMetaById('components/modal/index.zh-CN');
      const demo = await demoIndexes['components/modal/index.zh-CN']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['components/modal/index.zh-CN'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('components/notification/index.en-US')) {
    metaMap['components/notification/index.en-US'] = async () => {
      const routeMeta = await getRouteMetaById('components/notification/index.en-US');
      const demo = await demoIndexes['components/notification/index.en-US']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['components/notification/index.en-US'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('components/notification/index.zh-CN')) {
    metaMap['components/notification/index.zh-CN'] = async () => {
      const routeMeta = await getRouteMetaById('components/notification/index.zh-CN');
      const demo = await demoIndexes['components/notification/index.zh-CN']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['components/notification/index.zh-CN'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('components/overview/index.en-US')) {
    metaMap['components/overview/index.en-US'] = async () => {
      const routeMeta = await getRouteMetaById('components/overview/index.en-US');
      const demo = await demoIndexes['components/overview/index.en-US']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['components/overview/index.en-US'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('components/overview/index.zh-CN')) {
    metaMap['components/overview/index.zh-CN'] = async () => {
      const routeMeta = await getRouteMetaById('components/overview/index.zh-CN');
      const demo = await demoIndexes['components/overview/index.zh-CN']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['components/overview/index.zh-CN'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('components/pagination/index.en-US')) {
    metaMap['components/pagination/index.en-US'] = async () => {
      const routeMeta = await getRouteMetaById('components/pagination/index.en-US');
      const demo = await demoIndexes['components/pagination/index.en-US']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['components/pagination/index.en-US'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('components/pagination/index.zh-CN')) {
    metaMap['components/pagination/index.zh-CN'] = async () => {
      const routeMeta = await getRouteMetaById('components/pagination/index.zh-CN');
      const demo = await demoIndexes['components/pagination/index.zh-CN']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['components/pagination/index.zh-CN'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('components/popconfirm/index.en-US')) {
    metaMap['components/popconfirm/index.en-US'] = async () => {
      const routeMeta = await getRouteMetaById('components/popconfirm/index.en-US');
      const demo = await demoIndexes['components/popconfirm/index.en-US']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['components/popconfirm/index.en-US'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('components/popconfirm/index.zh-CN')) {
    metaMap['components/popconfirm/index.zh-CN'] = async () => {
      const routeMeta = await getRouteMetaById('components/popconfirm/index.zh-CN');
      const demo = await demoIndexes['components/popconfirm/index.zh-CN']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['components/popconfirm/index.zh-CN'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('components/popover/index.en-US')) {
    metaMap['components/popover/index.en-US'] = async () => {
      const routeMeta = await getRouteMetaById('components/popover/index.en-US');
      const demo = await demoIndexes['components/popover/index.en-US']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['components/popover/index.en-US'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('components/popover/index.zh-CN')) {
    metaMap['components/popover/index.zh-CN'] = async () => {
      const routeMeta = await getRouteMetaById('components/popover/index.zh-CN');
      const demo = await demoIndexes['components/popover/index.zh-CN']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['components/popover/index.zh-CN'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('components/progress/index.en-US')) {
    metaMap['components/progress/index.en-US'] = async () => {
      const routeMeta = await getRouteMetaById('components/progress/index.en-US');
      const demo = await demoIndexes['components/progress/index.en-US']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['components/progress/index.en-US'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('components/progress/index.zh-CN')) {
    metaMap['components/progress/index.zh-CN'] = async () => {
      const routeMeta = await getRouteMetaById('components/progress/index.zh-CN');
      const demo = await demoIndexes['components/progress/index.zh-CN']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['components/progress/index.zh-CN'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('components/qr-code/index.en-US')) {
    metaMap['components/qr-code/index.en-US'] = async () => {
      const routeMeta = await getRouteMetaById('components/qr-code/index.en-US');
      const demo = await demoIndexes['components/qr-code/index.en-US']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['components/qr-code/index.en-US'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('components/qr-code/index.zh-CN')) {
    metaMap['components/qr-code/index.zh-CN'] = async () => {
      const routeMeta = await getRouteMetaById('components/qr-code/index.zh-CN');
      const demo = await demoIndexes['components/qr-code/index.zh-CN']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['components/qr-code/index.zh-CN'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('components/radio/index.en-US')) {
    metaMap['components/radio/index.en-US'] = async () => {
      const routeMeta = await getRouteMetaById('components/radio/index.en-US');
      const demo = await demoIndexes['components/radio/index.en-US']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['components/radio/index.en-US'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('components/radio/index.zh-CN')) {
    metaMap['components/radio/index.zh-CN'] = async () => {
      const routeMeta = await getRouteMetaById('components/radio/index.zh-CN');
      const demo = await demoIndexes['components/radio/index.zh-CN']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['components/radio/index.zh-CN'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('components/rate/index.en-US')) {
    metaMap['components/rate/index.en-US'] = async () => {
      const routeMeta = await getRouteMetaById('components/rate/index.en-US');
      const demo = await demoIndexes['components/rate/index.en-US']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['components/rate/index.en-US'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('components/rate/index.zh-CN')) {
    metaMap['components/rate/index.zh-CN'] = async () => {
      const routeMeta = await getRouteMetaById('components/rate/index.zh-CN');
      const demo = await demoIndexes['components/rate/index.zh-CN']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['components/rate/index.zh-CN'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('components/result/index.en-US')) {
    metaMap['components/result/index.en-US'] = async () => {
      const routeMeta = await getRouteMetaById('components/result/index.en-US');
      const demo = await demoIndexes['components/result/index.en-US']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['components/result/index.en-US'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('components/result/index.zh-CN')) {
    metaMap['components/result/index.zh-CN'] = async () => {
      const routeMeta = await getRouteMetaById('components/result/index.zh-CN');
      const demo = await demoIndexes['components/result/index.zh-CN']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['components/result/index.zh-CN'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('components/segmented/index.en-US')) {
    metaMap['components/segmented/index.en-US'] = async () => {
      const routeMeta = await getRouteMetaById('components/segmented/index.en-US');
      const demo = await demoIndexes['components/segmented/index.en-US']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['components/segmented/index.en-US'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('components/segmented/index.zh-CN')) {
    metaMap['components/segmented/index.zh-CN'] = async () => {
      const routeMeta = await getRouteMetaById('components/segmented/index.zh-CN');
      const demo = await demoIndexes['components/segmented/index.zh-CN']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['components/segmented/index.zh-CN'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('components/select/index.en-US')) {
    metaMap['components/select/index.en-US'] = async () => {
      const routeMeta = await getRouteMetaById('components/select/index.en-US');
      const demo = await demoIndexes['components/select/index.en-US']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['components/select/index.en-US'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('components/select/index.zh-CN')) {
    metaMap['components/select/index.zh-CN'] = async () => {
      const routeMeta = await getRouteMetaById('components/select/index.zh-CN');
      const demo = await demoIndexes['components/select/index.zh-CN']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['components/select/index.zh-CN'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('components/skeleton/index.en-US')) {
    metaMap['components/skeleton/index.en-US'] = async () => {
      const routeMeta = await getRouteMetaById('components/skeleton/index.en-US');
      const demo = await demoIndexes['components/skeleton/index.en-US']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['components/skeleton/index.en-US'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('components/skeleton/index.zh-CN')) {
    metaMap['components/skeleton/index.zh-CN'] = async () => {
      const routeMeta = await getRouteMetaById('components/skeleton/index.zh-CN');
      const demo = await demoIndexes['components/skeleton/index.zh-CN']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['components/skeleton/index.zh-CN'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('components/slider/index.en-US')) {
    metaMap['components/slider/index.en-US'] = async () => {
      const routeMeta = await getRouteMetaById('components/slider/index.en-US');
      const demo = await demoIndexes['components/slider/index.en-US']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['components/slider/index.en-US'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('components/slider/index.zh-CN')) {
    metaMap['components/slider/index.zh-CN'] = async () => {
      const routeMeta = await getRouteMetaById('components/slider/index.zh-CN');
      const demo = await demoIndexes['components/slider/index.zh-CN']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['components/slider/index.zh-CN'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('components/space/index.en-US')) {
    metaMap['components/space/index.en-US'] = async () => {
      const routeMeta = await getRouteMetaById('components/space/index.en-US');
      const demo = await demoIndexes['components/space/index.en-US']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['components/space/index.en-US'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('components/space/index.zh-CN')) {
    metaMap['components/space/index.zh-CN'] = async () => {
      const routeMeta = await getRouteMetaById('components/space/index.zh-CN');
      const demo = await demoIndexes['components/space/index.zh-CN']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['components/space/index.zh-CN'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('components/spin/index.en-US')) {
    metaMap['components/spin/index.en-US'] = async () => {
      const routeMeta = await getRouteMetaById('components/spin/index.en-US');
      const demo = await demoIndexes['components/spin/index.en-US']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['components/spin/index.en-US'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('components/spin/index.zh-CN')) {
    metaMap['components/spin/index.zh-CN'] = async () => {
      const routeMeta = await getRouteMetaById('components/spin/index.zh-CN');
      const demo = await demoIndexes['components/spin/index.zh-CN']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['components/spin/index.zh-CN'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('components/statistic/index.en-US')) {
    metaMap['components/statistic/index.en-US'] = async () => {
      const routeMeta = await getRouteMetaById('components/statistic/index.en-US');
      const demo = await demoIndexes['components/statistic/index.en-US']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['components/statistic/index.en-US'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('components/statistic/index.zh-CN')) {
    metaMap['components/statistic/index.zh-CN'] = async () => {
      const routeMeta = await getRouteMetaById('components/statistic/index.zh-CN');
      const demo = await demoIndexes['components/statistic/index.zh-CN']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['components/statistic/index.zh-CN'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('components/steps/index.en-US')) {
    metaMap['components/steps/index.en-US'] = async () => {
      const routeMeta = await getRouteMetaById('components/steps/index.en-US');
      const demo = await demoIndexes['components/steps/index.en-US']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['components/steps/index.en-US'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('components/steps/index.zh-CN')) {
    metaMap['components/steps/index.zh-CN'] = async () => {
      const routeMeta = await getRouteMetaById('components/steps/index.zh-CN');
      const demo = await demoIndexes['components/steps/index.zh-CN']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['components/steps/index.zh-CN'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('components/switch/index.en-US')) {
    metaMap['components/switch/index.en-US'] = async () => {
      const routeMeta = await getRouteMetaById('components/switch/index.en-US');
      const demo = await demoIndexes['components/switch/index.en-US']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['components/switch/index.en-US'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('components/switch/index.zh-CN')) {
    metaMap['components/switch/index.zh-CN'] = async () => {
      const routeMeta = await getRouteMetaById('components/switch/index.zh-CN');
      const demo = await demoIndexes['components/switch/index.zh-CN']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['components/switch/index.zh-CN'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('components/table/index.en-US')) {
    metaMap['components/table/index.en-US'] = async () => {
      const routeMeta = await getRouteMetaById('components/table/index.en-US');
      const demo = await demoIndexes['components/table/index.en-US']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['components/table/index.en-US'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('components/table/index.zh-CN')) {
    metaMap['components/table/index.zh-CN'] = async () => {
      const routeMeta = await getRouteMetaById('components/table/index.zh-CN');
      const demo = await demoIndexes['components/table/index.zh-CN']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['components/table/index.zh-CN'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('components/tabs/index.en-US')) {
    metaMap['components/tabs/index.en-US'] = async () => {
      const routeMeta = await getRouteMetaById('components/tabs/index.en-US');
      const demo = await demoIndexes['components/tabs/index.en-US']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['components/tabs/index.en-US'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('components/tabs/index.zh-CN')) {
    metaMap['components/tabs/index.zh-CN'] = async () => {
      const routeMeta = await getRouteMetaById('components/tabs/index.zh-CN');
      const demo = await demoIndexes['components/tabs/index.zh-CN']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['components/tabs/index.zh-CN'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('components/tag/index.en-US')) {
    metaMap['components/tag/index.en-US'] = async () => {
      const routeMeta = await getRouteMetaById('components/tag/index.en-US');
      const demo = await demoIndexes['components/tag/index.en-US']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['components/tag/index.en-US'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('components/tag/index.zh-CN')) {
    metaMap['components/tag/index.zh-CN'] = async () => {
      const routeMeta = await getRouteMetaById('components/tag/index.zh-CN');
      const demo = await demoIndexes['components/tag/index.zh-CN']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['components/tag/index.zh-CN'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('components/time-picker/index.en-US')) {
    metaMap['components/time-picker/index.en-US'] = async () => {
      const routeMeta = await getRouteMetaById('components/time-picker/index.en-US');
      const demo = await demoIndexes['components/time-picker/index.en-US']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['components/time-picker/index.en-US'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('components/time-picker/index.zh-CN')) {
    metaMap['components/time-picker/index.zh-CN'] = async () => {
      const routeMeta = await getRouteMetaById('components/time-picker/index.zh-CN');
      const demo = await demoIndexes['components/time-picker/index.zh-CN']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['components/time-picker/index.zh-CN'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('components/timeline/index.en-US')) {
    metaMap['components/timeline/index.en-US'] = async () => {
      const routeMeta = await getRouteMetaById('components/timeline/index.en-US');
      const demo = await demoIndexes['components/timeline/index.en-US']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['components/timeline/index.en-US'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('components/timeline/index.zh-CN')) {
    metaMap['components/timeline/index.zh-CN'] = async () => {
      const routeMeta = await getRouteMetaById('components/timeline/index.zh-CN');
      const demo = await demoIndexes['components/timeline/index.zh-CN']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['components/timeline/index.zh-CN'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('components/tooltip/index.en-US')) {
    metaMap['components/tooltip/index.en-US'] = async () => {
      const routeMeta = await getRouteMetaById('components/tooltip/index.en-US');
      const demo = await demoIndexes['components/tooltip/index.en-US']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['components/tooltip/index.en-US'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('components/tooltip/index.zh-CN')) {
    metaMap['components/tooltip/index.zh-CN'] = async () => {
      const routeMeta = await getRouteMetaById('components/tooltip/index.zh-CN');
      const demo = await demoIndexes['components/tooltip/index.zh-CN']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['components/tooltip/index.zh-CN'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('components/tour/index.en-US')) {
    metaMap['components/tour/index.en-US'] = async () => {
      const routeMeta = await getRouteMetaById('components/tour/index.en-US');
      const demo = await demoIndexes['components/tour/index.en-US']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['components/tour/index.en-US'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('components/tour/index.zh-CN')) {
    metaMap['components/tour/index.zh-CN'] = async () => {
      const routeMeta = await getRouteMetaById('components/tour/index.zh-CN');
      const demo = await demoIndexes['components/tour/index.zh-CN']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['components/tour/index.zh-CN'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('components/transfer/index.en-US')) {
    metaMap['components/transfer/index.en-US'] = async () => {
      const routeMeta = await getRouteMetaById('components/transfer/index.en-US');
      const demo = await demoIndexes['components/transfer/index.en-US']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['components/transfer/index.en-US'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('components/transfer/index.zh-CN')) {
    metaMap['components/transfer/index.zh-CN'] = async () => {
      const routeMeta = await getRouteMetaById('components/transfer/index.zh-CN');
      const demo = await demoIndexes['components/transfer/index.zh-CN']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['components/transfer/index.zh-CN'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('components/tree-select/index.en-US')) {
    metaMap['components/tree-select/index.en-US'] = async () => {
      const routeMeta = await getRouteMetaById('components/tree-select/index.en-US');
      const demo = await demoIndexes['components/tree-select/index.en-US']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['components/tree-select/index.en-US'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('components/tree-select/index.zh-CN')) {
    metaMap['components/tree-select/index.zh-CN'] = async () => {
      const routeMeta = await getRouteMetaById('components/tree-select/index.zh-CN');
      const demo = await demoIndexes['components/tree-select/index.zh-CN']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['components/tree-select/index.zh-CN'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('components/tree/index.en-US')) {
    metaMap['components/tree/index.en-US'] = async () => {
      const routeMeta = await getRouteMetaById('components/tree/index.en-US');
      const demo = await demoIndexes['components/tree/index.en-US']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['components/tree/index.en-US'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('components/tree/index.zh-CN')) {
    metaMap['components/tree/index.zh-CN'] = async () => {
      const routeMeta = await getRouteMetaById('components/tree/index.zh-CN');
      const demo = await demoIndexes['components/tree/index.zh-CN']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['components/tree/index.zh-CN'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('components/typography/index.en-US')) {
    metaMap['components/typography/index.en-US'] = async () => {
      const routeMeta = await getRouteMetaById('components/typography/index.en-US');
      const demo = await demoIndexes['components/typography/index.en-US']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['components/typography/index.en-US'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('components/typography/index.zh-CN')) {
    metaMap['components/typography/index.zh-CN'] = async () => {
      const routeMeta = await getRouteMetaById('components/typography/index.zh-CN');
      const demo = await demoIndexes['components/typography/index.zh-CN']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['components/typography/index.zh-CN'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('components/upload/index.en-US')) {
    metaMap['components/upload/index.en-US'] = async () => {
      const routeMeta = await getRouteMetaById('components/upload/index.en-US');
      const demo = await demoIndexes['components/upload/index.en-US']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['components/upload/index.en-US'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('components/upload/index.zh-CN')) {
    metaMap['components/upload/index.zh-CN'] = async () => {
      const routeMeta = await getRouteMetaById('components/upload/index.zh-CN');
      const demo = await demoIndexes['components/upload/index.zh-CN']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['components/upload/index.zh-CN'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('components/watermark/index.en-US')) {
    metaMap['components/watermark/index.en-US'] = async () => {
      const routeMeta = await getRouteMetaById('components/watermark/index.en-US');
      const demo = await demoIndexes['components/watermark/index.en-US']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['components/watermark/index.en-US'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('components/watermark/index.zh-CN')) {
    metaMap['components/watermark/index.zh-CN'] = async () => {
      const routeMeta = await getRouteMetaById('components/watermark/index.zh-CN');
      const demo = await demoIndexes['components/watermark/index.zh-CN']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['components/watermark/index.zh-CN'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('changelog-cn')) {
    metaMap['changelog-cn'] = async () => {
      const routeMeta = await getRouteMetaById('changelog-cn');
      const demo = await demoIndexes['changelog-cn']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['changelog-cn'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('changelog')) {
    metaMap['changelog'] = async () => {
      const routeMeta = await getRouteMetaById('changelog');
      const demo = await demoIndexes['changelog']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['changelog'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('components/date-picker/index.$tab-design.zh-CN')) {
    metaMap['components/date-picker/index.$tab-design.zh-CN'] = async () => {
      const routeMeta = await getRouteMetaById('components/date-picker/index.$tab-design.zh-CN');
      const demo = await demoIndexes['components/date-picker/index.$tab-design.zh-CN']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['components/date-picker/index.$tab-design.zh-CN'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }

  // Wait for all meta data to be loaded
  const metaList = await Promise.all(Object.entries(metaMap).map(([id, getter]) => getter()));

  // Merge into filesMeta
  const filesMeta = {};

  Object.entries(metaMap).forEach(([id], index) => {
    filesMeta[id] = metaList[index];
  });

  return filesMeta;
}

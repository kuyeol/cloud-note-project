// @ts-nocheck
// This file is generated by Umi automatically
// DO NOT CHANGE IT MANUALLY!
import {
    createIntl,
    IntlShape,
    MessageDescriptor,
} from 'G:/A_cloud-note-project/front/app-crm-minimal/myapp/node_modules/@umijs/plugins/node_modules/react-intl';
import { getPluginManager } from '../core/plugin';
import EventEmitter from 'G:/A_cloud-note-project/front/app-crm-minimal/myapp/node_modules/event-emitter';
// @ts-ignore
import warning from 'G:/A_cloud-note-project/front/app-crm-minimal/myapp/node_modules/warning';

export {
    createIntl,
};
export {
    FormattedDate,
    FormattedDateParts,
    FormattedDisplayName,
    FormattedHTMLMessage,
    FormattedList,
    FormattedMessage,
    FormattedNumber,
    FormattedNumberParts,
    FormattedPlural,
    FormattedRelativeTime,
    FormattedTime,
    FormattedTimeParts,
    IntlContext,
    IntlProvider,
    RawIntlProvider,
    createIntlCache,
    defineMessages,
    injectIntl,
    useIntl,
} from 'G:/A_cloud-note-project/front/app-crm-minimal/myapp/node_modules/@umijs/plugins/node_modules/react-intl';

let g_intl: IntlShape;

const useLocalStorage = true;

// @ts-ignore
export const event = new EventEmitter();

export const LANG_CHANGE_EVENT = Symbol('LANG_CHANGE');

import bnBD0 from 'antd/es/locale/bn_BD';
import lang_bnBD0 from "G:/A_cloud-note-project/front/app-crm-minimal/myapp/src/locales/bn-BD.ts";
import enUS0 from 'antd/es/locale/en_US';
import lang_enUS0 from "G:/A_cloud-note-project/front/app-crm-minimal/myapp/src/locales/en-US.ts";
import faIR0 from 'antd/es/locale/fa_IR';
import lang_faIR0 from "G:/A_cloud-note-project/front/app-crm-minimal/myapp/src/locales/fa-IR.ts";
import idID0 from 'antd/es/locale/id_ID';
import lang_idID0 from "G:/A_cloud-note-project/front/app-crm-minimal/myapp/src/locales/id-ID.ts";
import jaJP0 from 'antd/es/locale/ja_JP';
import lang_jaJP0 from "G:/A_cloud-note-project/front/app-crm-minimal/myapp/src/locales/ja-JP.ts";
import koKR0 from 'antd/es/locale/ko_KR';
import lang_koKR0 from "G:/A_cloud-note-project/front/app-crm-minimal/myapp/src/locales/ko-KR.ts";
import ptBR0 from 'antd/es/locale/pt_BR';
import lang_ptBR0 from "G:/A_cloud-note-project/front/app-crm-minimal/myapp/src/locales/pt-BR.ts";
import zhCN0 from 'antd/es/locale/zh_CN';
import lang_zhCN0 from "G:/A_cloud-note-project/front/app-crm-minimal/myapp/src/locales/zh-CN.ts";
import zhTW0 from 'antd/es/locale/zh_TW';
import lang_zhTW0 from "G:/A_cloud-note-project/front/app-crm-minimal/myapp/src/locales/zh-TW.ts";

const flattenMessages=(
    nestedMessages: Record<string, any>,
    prefix = '',
) => {
    return Object.keys(nestedMessages).reduce(
        (messages: Record<string, any>, key) => {
            const value = nestedMessages[key];
            const prefixedKey = prefix ? `${prefix}.${key}` : key;
            if (typeof value === 'string') {
                messages[prefixedKey] = value;
            } else {
                Object.assign(messages, flattenMessages(value, prefixedKey));
            }
            return messages;
        },
        {},
    );
}

export const localeInfo: {[key: string]: any} = {
    'bn-BD': {
        messages: {
            ...flattenMessages(lang_bnBD0),
        },
        locale: 'bn-BD',
        antd: {
            ...bnBD0,
        },
        momentLocale: 'bn-bd',
    },
    'en-US': {
        messages: {
            ...flattenMessages(lang_enUS0),
        },
        locale: 'en-US',
        antd: {
            ...enUS0,
        },
        momentLocale: 'en',
    },
    'fa-IR': {
        messages: {
            ...flattenMessages(lang_faIR0),
        },
        locale: 'fa-IR',
        antd: {
            ...faIR0,
        },
        momentLocale: 'fa',
    },
    'id-ID': {
        messages: {
            ...flattenMessages(lang_idID0),
        },
        locale: 'id-ID',
        antd: {
            ...idID0,
        },
        momentLocale: 'id',
    },
    'ja-JP': {
        messages: {
            ...flattenMessages(lang_jaJP0),
        },
        locale: 'ja-JP',
        antd: {
            ...jaJP0,
        },
        momentLocale: 'ja',
    },
    'ko-KR': {
        messages: {
            ...flattenMessages(lang_koKR0),
        },
        locale: 'ko-KR',
        antd: {
            ...koKR0,
        },
        momentLocale: 'ko',
    },
    'pt-BR': {
        messages: {
            ...flattenMessages(lang_ptBR0),
        },
        locale: 'pt-BR',
        antd: {
            ...ptBR0,
        },
        momentLocale: 'pt-br',
    },
    'zh-CN': {
        messages: {
            ...flattenMessages(lang_zhCN0),
        },
        locale: 'zh-CN',
        antd: {
            ...zhCN0,
        },
        momentLocale: 'zh-cn',
    },
    'zh-TW': {
        messages: {
            ...flattenMessages(lang_zhTW0),
        },
        locale: 'zh-TW',
        antd: {
            ...zhTW0,
        },
        momentLocale: 'zh-tw',
    },
};

/**
 * 增加一个新的国际化语言
 * @param name 语言的 key
 * @param messages 对应的枚举对象
 * @param extraLocales momentLocale, antd 国际化
 */
export const addLocale = (
    name: string,
    messages: Object,
    extraLocales: {
        momentLocale:string;
        antd: import('antd/es/locale').Locale
    },
) => {
    if (!name) {
        return;
    }
    // 可以合并
    const mergeMessages = localeInfo[name]?.messages
        ? Object.assign({}, localeInfo[name].messages, messages)
        : messages;

    // 用户只是追加 messages 时，extraLocales 可选
    const { momentLocale = localeInfo[name]?.momentLocale, antd = localeInfo[name]?.antd } = extraLocales || {};
    const locale = name.split('-')?.join('-')
    localeInfo[name] = {
        messages: mergeMessages,
        locale,
        momentLocale: momentLocale,
        antd,
    };
    // 如果这是的 name 和当前的locale 相同需要重新设置一下，不然更新不了
    if (locale === getLocale()) {
        event.emit(LANG_CHANGE_EVENT, locale);
    }
};

const applyRuntimeLocalePlugin = (initialValue: any) => {
    return getPluginManager().applyPlugins({
        key: 'locale',
        type: 'modify',
        initialValue
    });
}

const _createIntl = (locale: string) => {
    const runtimeLocale = applyRuntimeLocalePlugin(localeInfo[locale]);
    const { cache, ...config } = runtimeLocale;
    return createIntl(config, cache);
}

/**
 * 获取当前的 intl 对象，可以在 node 中使用
 * @param locale 需要切换的语言类型
 * @param changeIntl 是否不使用 g_intl
 * @returns IntlShape
 */
export const getIntl = (locale?: string, changeIntl?: boolean) => {
    // 如果全局的 g_intl 存在，且不是 setIntl 调用
    if (g_intl && !changeIntl && !locale) {
        return g_intl;
    }
    // 获取当前 locale
    if (!locale) locale = getLocale();
    // 如果存在于 localeInfo 中
    if (locale&&localeInfo[locale]) {
        return _createIntl(locale);
    }
    // 不存在需要一个报错提醒
    warning(
        !locale||!!localeInfo[locale],
        `The current popular language does not exist, please check the locales folder!`,
    );
    // 使用 zh-CN
    if (localeInfo["ko-KR"]) {
        return _createIntl("ko-KR");
    }

    // 如果还没有，返回一个空的
    return createIntl({
        locale: "ko-KR",
        messages: {}
    });
};

/**
 * 切换全局的 intl 的设置
 * @param locale 语言的key
 */
export const setIntl = (locale: string) => {
    g_intl = getIntl(locale, true);
};

/**
 * 获取当前选择的语言
 * @returns string
 */
export const getLocale = () => {
    const runtimeLocale = applyRuntimeLocalePlugin({});
    // runtime getLocale for user define
    if (typeof runtimeLocale?.getLocale === 'function') {
        return runtimeLocale.getLocale();
    }
    // please clear localStorage if you change the baseSeparator config
    // because changing will break the app
    const lang =
        navigator.cookieEnabled && typeof localStorage !== 'undefined' && useLocalStorage
            ? window.localStorage.getItem('umi_locale')
            : '';
    // support baseNavigator, default true
    let browserLang;
    const isNavigatorLanguageValid =
        typeof navigator !== 'undefined' && typeof navigator.language === 'string';
    browserLang = isNavigatorLanguageValid
        ? navigator.language.split('-').join('-')
        : '';
    return lang || browserLang || "ko-KR";
};


/**
 * 获取当前选择的方向
 * @returns string
 */
export const getDirection = () => {
    const lang = getLocale();
    // array with all prefixs for rtl langueges ex: ar-EG , he-IL
    const rtlLangs = ['he', 'ar', 'fa', 'ku']
    const direction =  rtlLangs.filter(lng => lang.startsWith(lng)).length ? 'rtl' : 'ltr';
    return direction;
};

/**
 * 切换语言
 * @param lang 语言的 key
 * @param realReload 是否刷新页面，默认刷新
 * @returns string
 */
export const setLocale = (lang: string, realReload: boolean = true) => {
    //const { pluginManager } = useAppContext();
    //const runtimeLocale = pluginManagerapplyPlugins({
    //  key: 'locale',
    //  workaround: 不使用 ApplyPluginsType.modify 是为了避免循环依赖，与 fast-refresh 一起用时会有问题
    //  type: 'modify',
    //  initialValue: {},
    //});

    const updater = () => {
        if (getLocale() !== lang) {
            if (navigator.cookieEnabled && typeof window.localStorage !== 'undefined' && useLocalStorage) {
                window.localStorage.setItem('umi_locale', lang || '');
            }
            setIntl(lang);
            if (realReload) {
                window.location.reload();
            } else {
                event.emit(LANG_CHANGE_EVENT, lang);
                // chrome 不支持这个事件。所以人肉触发一下
                if (window.dispatchEvent) {
                    const event = new Event('languagechange');
                    window.dispatchEvent(event);
                }
            }
        }
    }

    //if (typeof runtimeLocale?.setLocale === 'function') {
    //  runtimeLocale.setLocale({
    //    lang,
    //    realReload,
    //    updater: updater,
    //  });
    //  return;
    //}

    updater();
};

let firstWaring = true;

/**
 * intl.formatMessage 的语法糖
 * @deprecated 使用此 api 会造成切换语言的时候无法自动刷新，请使用 useIntl 或 injectIntl
 * @param descriptor { id : string, defaultMessage : string }
 * @param values { [key:string] : string }
 * @returns string
 */
export const formatMessage: IntlShape['formatMessage'] = (
    descriptor: MessageDescriptor,
    values: any,
) => {
    if (firstWaring) {
        warning(
            false,
            `Using this API will cause automatic refresh when switching languages, please use useIntl or injectIntl.

使用此 api 会造成切换语言的时候无法自动刷新，请使用 useIntl 或 injectIntl。

http://j.mp/37Fkd5Q
      `,
        );
        firstWaring = false;
    }
    if (!g_intl) {
        setIntl(getLocale());
    }
    return g_intl.formatMessage(descriptor, values);
};

/**
 * 获取语言列表
 * @returns string[]
 */
export const getAllLocales = () => Object.keys(localeInfo);
// @ts-nocheck
// This file is generated by Umi automatically
// DO NOT CHANGE IT MANUALLY!
import {
    createIntl,
    IntlShape,
    MessageDescriptor,
} from 'G:/A_cloud-note-project/front/app-crm-minimal/myapp/node_modules/@umijs/plugins/node_modules/react-intl';
import { getPluginManager } from '../core/plugin';

// @ts-ignore


export {
    createIntl,
};
export {
    FormattedDate,
    FormattedDateParts,
    FormattedDisplayName,
    FormattedHTMLMessage,
    FormattedList,
    FormattedMessage,
    FormattedNumber,
    FormattedNumberParts,
    FormattedPlural,
    FormattedRelativeTime,
    FormattedTime,
    FormattedTimeParts,
    IntlContext,
    IntlProvider,
    RawIntlProvider,
    createIntlCache,
    defineMessages,
    injectIntl,
    useIntl,
} from 'G:/A_cloud-note-project/front/app-crm-minimal/myapp/node_modules/@umijs/plugins/node_modules/react-intl';





// @ts-ignore




export const localeInfo: {[key: string]: any} = {
    'bn-BD': {
        messages: {
            ...flattenMessages(lang_bnBD0),
        },
        locale: 'bn-BD',
        antd: {
            ...bnBD0,
        },
        momentLocale: 'bn-bd',
    },
    'en-US': {
        messages: {
            ...flattenMessages(lang_enUS0),
        },
        locale: 'en-US',
        antd: {
            ...enUS0,
        },
        momentLocale: 'en',
    },
    'fa-IR': {
        messages: {
            ...flattenMessages(lang_faIR0),
        },
        locale: 'fa-IR',
        antd: {
            ...faIR0,
        },
        momentLocale: 'fa',
    },
    'id-ID': {
        messages: {
            ...flattenMessages(lang_idID0),
        },
        locale: 'id-ID',
        antd: {
            ...idID0,
        },
        momentLocale: 'id',
    },
    'ja-JP': {
        messages: {
            ...flattenMessages(lang_jaJP0),
        },
        locale: 'ja-JP',
        antd: {
            ...jaJP0,
        },
        momentLocale: 'ja',
    },
    'ko-KR': {
        messages: {
            ...flattenMessages(lang_koKR0),
        },
        locale: 'ko-KR',
        antd: {
            ...koKR0,
        },
        momentLocale: 'ko',
    },
    'pt-BR': {
        messages: {
            ...flattenMessages(lang_ptBR0),
        },
        locale: 'pt-BR',
        antd: {
            ...ptBR0,
        },
        momentLocale: 'pt-br',
    },
    'zh-CN': {
        messages: {
            ...flattenMessages(lang_zhCN0),
        },
        locale: 'zh-CN',
        antd: {
            ...zhCN0,
        },
        momentLocale: 'zh-cn',
    },
    'zh-TW': {
        messages: {
            ...flattenMessages(lang_zhTW0),
        },
        locale: 'zh-TW',
        antd: {
            ...zhTW0,
        },
        momentLocale: 'zh-tw',
    },
};

/**
 * 增加一个新的国际化语言
 * @param name 语言的 key
 * @param messages 对应的枚举对象
 * @param extraLocales momentLocale, antd 国际化
 */
export const addLocale = (
    name: string,
    messages: Object,
    extraLocales: {
        momentLocale:string;
        antd: import('antd/es/locale').Locale
    },
) => {
    if (!name) {
        return;
    }
    // 可以合并
    const mergeMessages = localeInfo[name]?.messages
        ? Object.assign({}, localeInfo[name].messages, messages)
        : messages;

    // 用户只是追加 messages 时，extraLocales 可选
    const { momentLocale = localeInfo[name]?.momentLocale, antd = localeInfo[name]?.antd } = extraLocales || {};
    const locale = name.split('-')?.join('-')
    localeInfo[name] = {
        messages: mergeMessages,
        locale,
        momentLocale: momentLocale,
        antd,
    };
    // 如果这是的 name 和当前的locale 相同需要重新设置一下，不然更新不了
    if (locale === getLocale()) {
        event.emit(LANG_CHANGE_EVENT, locale);
    }
};

const applyRuntimeLocalePlugin = (initialValue: any) => {
    return getPluginManager().applyPlugins({
        key: 'locale',
        type: 'modify',
        initialValue
    });
}

const _createIntl = (locale: string) => {
    const runtimeLocale = applyRuntimeLocalePlugin(localeInfo[locale]);
    const { cache, ...config } = runtimeLocale;
    return createIntl(config, cache);
}

/**
 * 获取当前的 intl 对象，可以在 node 中使用
 * @param locale 需要切换的语言类型
 * @param changeIntl 是否不使用 g_intl
 * @returns IntlShape
 */
export const getIntl = (locale?: string, changeIntl?: boolean) => {
    // 如果全局的 g_intl 存在，且不是 setIntl 调用
    if (g_intl && !changeIntl && !locale) {
        return g_intl;
    }
    // 获取当前 locale
    if (!locale) locale = getLocale();
    // 如果存在于 localeInfo 中
    if (locale&&localeInfo[locale]) {
        return _createIntl(locale);
    }
    // 不存在需要一个报错提醒
    warning(
        !locale||!!localeInfo[locale],
        `The current popular language does not exist, please check the locales folder!`,
    );
    // 使用 zh-CN
    if (localeInfo["ko-KR"]) {
        return _createIntl("ko-KR");
    }

    // 如果还没有，返回一个空的
    return createIntl({
        locale: "ko-KR",
        messages: {}
    });
};

/**
 * 切换全局的 intl 的设置
 * @param locale 语言的key
 */
export const setIntl = (locale: string) => {
    g_intl = getIntl(locale, true);
};

/**
 * 获取当前选择的语言
 * @returns string
 */
export const getLocale = () => {
    const runtimeLocale = applyRuntimeLocalePlugin({});
    // runtime getLocale for user define
    if (typeof runtimeLocale?.getLocale === 'function') {
        return runtimeLocale.getLocale();
    }
    // please clear localStorage if you change the baseSeparator config
    // because changing will break the app
    const lang =
        navigator.cookieEnabled && typeof localStorage !== 'undefined' && useLocalStorage
            ? window.localStorage.getItem('umi_locale')
            : '';
    // support baseNavigator, default true
    let browserLang;
    const isNavigatorLanguageValid =
        typeof navigator !== 'undefined' && typeof navigator.language === 'string';
    browserLang = isNavigatorLanguageValid
        ? navigator.language.split('-').join('-')
        : '';
    return lang || browserLang || "ko-KR";
};


/**
 * 获取当前选择的方向
 * @returns string
 */
export const getDirection = () => {
    const lang = getLocale();
    // array with all prefixs for rtl langueges ex: ar-EG , he-IL
    const rtlLangs = ['he', 'ar', 'fa', 'ku']
    const direction =  rtlLangs.filter(lng => lang.startsWith(lng)).length ? 'rtl' : 'ltr';
    return direction;
};

/**
 * 切换语言
 * @param lang 语言的 key
 * @param realReload 是否刷新页面，默认刷新
 * @returns string
 */
export const setLocale = (lang: string, realReload: boolean = true) => {
    //const { pluginManager } = useAppContext();
    //const runtimeLocale = pluginManagerapplyPlugins({
    //  key: 'locale',
    //  workaround: 不使用 ApplyPluginsType.modify 是为了避免循环依赖，与 fast-refresh 一起用时会有问题
    //  type: 'modify',
    //  initialValue: {},
    //});

    const updater = () => {
        if (getLocale() !== lang) {
            if (navigator.cookieEnabled && typeof window.localStorage !== 'undefined' && useLocalStorage) {
                window.localStorage.setItem('umi_locale', lang || '');
            }
            setIntl(lang);
            if (realReload) {
                window.location.reload();
            } else {
                event.emit(LANG_CHANGE_EVENT, lang);
                // chrome 不支持这个事件。所以人肉触发一下
                if (window.dispatchEvent) {
                    const event = new Event('languagechange');
                    window.dispatchEvent(event);
                }
            }
        }
    }

    //if (typeof runtimeLocale?.setLocale === 'function') {
    //  runtimeLocale.setLocale({
    //    lang,
    //    realReload,
    //    updater: updater,
    //  });
    //  return;
    //}

    updater();
};

let firstWaring = true;

/**
 * intl.formatMessage 的语法糖
 * @deprecated 使用此 api 会造成切换语言的时候无法自动刷新，请使用 useIntl 或 injectIntl
 * @param descriptor { id : string, defaultMessage : string }
 * @param values { [key:string] : string }
 * @returns string
 */
export const formatMessage: IntlShape['formatMessage'] = (
    descriptor: MessageDescriptor,
    values: any,
) => {
    if (firstWaring) {
        warning(
            false,
            `Using this API will cause automatic refresh when switching languages, please use useIntl or injectIntl.

使用此 api 会造成切换语言的时候无法自动刷新，请使用 useIntl 或 injectIntl。

http://j.mp/37Fkd5Q
      `,
        );
        firstWaring = false;
    }
    if (!g_intl) {
        setIntl(getLocale());
    }
    return g_intl.formatMessage(descriptor, values);
};

/**
 * 获取语言列表
 * @returns string[]
 */
export const getAllLocales = () => Object.keys(localeInfo);




import React,{ useState } from 'react';
import { Menu, version, Dropdown } from 'antd';
import { ClickParam } from 'antd/es/menu';
import { DropDownProps } from 'antd/es/dropdown';
import { getLocale, getAllLocales, setLocale } from './localeExports';

export interface HeaderDropdownProps extends DropDownProps {
    overlayClassName?: string;
    placement?:
        | 'bottomLeft'
        | 'bottomRight'
        | 'topLeft'
        | 'topCenter'
        | 'topRight'
        | 'bottomCenter';
}

const HeaderDropdown: React.FC<HeaderDropdownProps> = ({
                                                           overlayClassName: cls,
                                                           ...restProps
                                                       }) => (
    <Dropdown
        overlayClassName={cls}
        {...restProps}
    />
);

interface LocalData {
    lang: string,
    label?: string,
    icon?: string,
    title?: string,
}

interface SelectLangProps {
    globalIconClassName?: string;
    postLocalesData?: (locales: LocalData[]) => LocalData[];
    onItemClick?: (params: ClickParam) => void;
    className?: string;
    reload?: boolean;
    icon?: React.ReactNode;
    style?: React.CSSProperties;
}

const transformArrayToObject = (allLangUIConfig:LocalData[])=>{
    return allLangUIConfig.reduce((obj, item) => {
        if(!item.lang){
            return obj;
        }

        return {
            ...obj,
            [item.lang]: item,
        };
    }, {});
}

const defaultLangUConfigMap = {
    'ar-EG': {
        lang: 'ar-EG',
        label: 'العربية',
        icon: '🇪🇬',
        title: 'لغة'
    },
    'az-AZ': {
        lang: 'az-AZ',
        label: 'Azərbaycan dili',
        icon: '🇦🇿',
        title: 'Dil'
    },
    'bg-BG': {
        lang: 'bg-BG',
        label: 'Български език',
        icon: '🇧🇬',
        title: 'език'
    },
    'bn-BD': {
        lang: 'bn-BD',
        label: 'বাংলা',
        icon: '🇧🇩',
        title: 'ভাষা'
    },
    'ca-ES': {
        lang: 'ca-ES',
        label: 'Catalá',
        icon: '🇨🇦',
        title: 'llengua'
    },
    'cs-CZ': {
        lang: 'cs-CZ',
        label: 'Čeština',
        icon: '🇨🇿',
        title: 'Jazyk'
    },
    'da-DK': {
        lang: 'da-DK',
        label: 'Dansk',
        icon: '🇩🇰',
        title: 'Sprog'
    },
    'de-DE': {
        lang: 'de-DE',
        label: 'Deutsch',
        icon: '🇩🇪',
        title: 'Sprache'
    },
    'el-GR': {
        lang: 'el-GR',
        label: 'Ελληνικά',
        icon: '🇬🇷',
        title: 'Γλώσσα'
    },
    'en-GB': {
        lang: 'en-GB',
        label: 'English',
        icon: '🇬🇧',
        title: 'Language'
    },
    'en-US': {
        lang: 'en-US',
        label: 'English',
        icon: '🇺🇸',
        title: 'Language'
    },
    'es-ES': {
        lang: 'es-ES',
        label: 'Español',
        icon: '🇪🇸',
        title: 'Idioma'
    },
    'et-EE': {
        lang: 'et-EE',
        label: 'Eesti',
        icon: '🇪🇪',
        title: 'Keel'
    },
    'fa-IR': {
        lang: 'fa-IR',
        label: 'فارسی',
        icon: '🇮🇷',
        title: 'زبان'
    },
    'fi-FI': {
        lang: 'fi-FI',
        label: 'Suomi',
        icon: '🇫🇮',
        title: 'Kieli'
    },
    'fr-BE': {
        lang: 'fr-BE',
        label: 'Français',
        icon: '🇧🇪',
        title: 'Langue'
    },
    'fr-FR': {
        lang: 'fr-FR',
        label: 'Français',
        icon: '🇫🇷',
        title: 'Langue'
    },
    'ga-IE': {
        lang: 'ga-IE',
        label: 'Gaeilge',
        icon: '🇮🇪',
        title: 'Teanga'
    },
    'he-IL': {
        lang: 'he-IL',
        label: 'עברית',
        icon: '🇮🇱',
        title: 'שפה'
    },
    'hi-IN': {
        lang: 'hi-IN',
        label: 'हिन्दी, हिंदी',
        icon: '🇮🇳',
        title: 'भाषा: हिन्दी'
    },
    'hr-HR': {
        lang: 'hr-HR',
        label: 'Hrvatski jezik',
        icon: '🇭🇷',
        title: 'Jezik'
    },
    'hu-HU': {
        lang: 'hu-HU',
        label: 'Magyar',
        icon: '🇭🇺',
        title: 'Nyelv'
    },
    'hy-AM': {
        lang: 'hu-HU',
        label: 'Հայերեն',
        icon: '🇦🇲',
        title: 'Լեզու'
    },
    'id-ID': {
        lang: 'id-ID',
        label: 'Bahasa Indonesia',
        icon: '🇮🇩',
        title: 'Bahasa'
    },
    'it-IT': {
        lang: 'it-IT',
        label: 'Italiano',
        icon: '🇮🇹',
        title: 'Linguaggio'
    },
    'is-IS': {
        lang: 'is-IS',
        label: 'Íslenska',
        icon: '🇮🇸',
        title: 'Tungumál'
    },
    'ja-JP': {
        lang: 'ja-JP',
        label: '日本語',
        icon: '🇯🇵',
        title: '言語'
    },
    'ku-IQ': {
        lang: 'ku-IQ',
        label: 'کوردی',
        icon: '🇮🇶',
        title: 'Ziman'
    },
    'kn-IN': {
        lang: 'kn-IN',
        label: 'ಕನ್ನಡ',
        icon: '🇮🇳',
        title: 'ಭಾಷೆ'
    },
    'ko-KR': {
        lang: 'ko-KR',
        label: '한국어',
        icon: '🇰🇷',
        title: '언어'
    },
    'lv-LV': {
        lang: 'lv-LV',
        label: 'Latviešu valoda',
        icon: '🇱🇮',
        title: 'Kalba'
    },
    'mk-MK': {
        lang: 'mk-MK',
        label: 'македонски јазик',
        icon: '🇲🇰',
        title: 'Јазик'
    },
    'mn-MN': {
        lang: 'mn-MN',
        label: 'Монгол хэл',
        icon: '🇲🇳',
        title: 'Хэл'
    },
    'ms-MY': {
        lang: 'ms-MY',
        label: 'بهاس ملايو‎',
        icon: '🇲🇾',
        title: 'Bahasa'
    },
    'nb-NO': {
        lang: 'nb-NO',
        label: 'Norsk',
        icon: '🇳🇴',
        title: 'Språk'
    },
    'ne-NP': {
        lang: 'ne-NP',
        label: 'नेपाली',
        icon: '🇳🇵',
        title: 'भाषा'
    },
    'nl-BE': {
        lang: 'nl-BE',
        label: 'Vlaams',
        icon: '🇧🇪',
        title: 'Taal'
    },
    'nl-NL': {
        lang: 'nl-NL',
        label: 'Nederlands',
        icon: '🇳🇱',
        title: 'Taal'
    },
    'pl-PL': {
        lang: 'pl-PL',
        label: 'Polski',
        icon: '🇵🇱',
        title: 'Język'
    },
    'pt-BR': {
        lang: 'pt-BR',
        label: 'Português',
        icon: '🇧🇷',
        title: 'Idiomas'
    },
    'pt-PT': {
        lang: 'pt-PT',
        label: 'Português',
        icon: '🇵🇹',
        title: 'Idiomas'
    },
    'ro-RO': {
        lang: 'ro-RO',
        label: 'Română',
        icon: '🇷🇴',
        title: 'Limba'
    },
    'ru-RU': {
        lang: 'ru-RU',
        label: 'Русский',
        icon: '🇷🇺',
        title: 'язык'
    },
    'sk-SK': {
        lang: 'sk-SK',
        label: 'Slovenčina',
        icon: '🇸🇰',
        title: 'Jazyk'
    },
    'sr-RS': {
        lang: 'sr-RS',
        label: 'српски језик',
        icon: '🇸🇷',
        title: 'Језик'
    },
    'sl-SI': {
        lang: 'sl-SI',
        label: 'Slovenščina',
        icon: '🇸🇱',
        title: 'Jezik'
    },
    'sv-SE': {
        lang: 'sv-SE',
        label: 'Svenska',
        icon: '🇸🇪',
        title: 'Språk'
    },
    'ta-IN': {
        lang: 'ta-IN',
        label: 'தமிழ்',
        icon: '🇮🇳',
        title: 'மொழி'
    },
    'th-TH': {
        lang: 'th-TH',
        label: 'ไทย',
        icon: '🇹🇭',
        title: 'ภาษา'
    },
    'tr-TR': {
        lang: 'tr-TR',
        label: 'Türkçe',
        icon: '🇹🇷',
        title: 'Dil'
    },
    'uk-UA': {
        lang: 'uk-UA',
        label: 'Українська',
        icon: '🇺🇰',
        title: 'Мова'
    },
    'vi-VN': {
        lang: 'vi-VN',
        label: 'Tiếng Việt',
        icon: '🇻🇳',
        title: 'Ngôn ngữ'
    },
    'zh-CN': {
        lang: 'zh-CN',
        label: '简体中文',
        icon: '🇨🇳',
        title: '语言'
    },
    'zh-TW': {
        lang: 'zh-TW',
        label: '繁體中文',
        icon: '🇭🇰',
        title: '語言'
    }
};

export const SelectLang: React.FC<SelectLangProps> = (props) => {
    const {
        globalIconClassName,
        postLocalesData,
        onItemClick,
        icon,
        style,
        reload,
        ...restProps
    } = props;
    const [selectedLang, setSelectedLang] = useState(() => getLocale());

    const changeLang = ({ key }: ClickParam): void => {
        setLocale(key, reload);
        setSelectedLang(getLocale())
    };


    const defaultLangUConfig = getAllLocales().map(
        (key) =>
            defaultLangUConfigMap[key] || {
                lang: key,
                label: key,
                icon: "🌐",
                title: key,
            }
    );

    const allLangUIConfig =
        postLocalesData?.(defaultLangUConfig) || defaultLangUConfig;
    const handleClick = onItemClick
        ? (params: ClickParam) => onItemClick(params)
        : changeLang;

    const menuItemStyle = { minWidth: "160px" };
    const menuItemIconStyle = { marginRight: "8px" };

    const langMenu = {
        selectedKeys: [selectedLang],
        onClick: handleClick,
        items: allLangUIConfig.map((localeObj) => ({
            key: localeObj.lang || localeObj.key,
            style: menuItemStyle,
            label: (
                <>
          <span role="img" aria-label={localeObj?.label || 'en-US'} style={menuItemIconStyle}>
            {localeObj?.icon || '🌐'}
          </span>
                    {localeObj?.label || 'en-US'}
                </>
            ),
        })),
    };

    // antd@5 和  4.24 之后推荐使用 menu，性能更好
    let dropdownProps;
    if (version.startsWith("5.") || version.startsWith("4.24.")) {
        dropdownProps = { menu: langMenu };
    } else if (version.startsWith("3.")) {
        dropdownProps = {
            overlay: (
                <Menu>
                    {langMenu.items.map((item) => (
                        <Menu.Item key={item.key} onClick={item.onClick}>
                            {item.label}
                        </Menu.Item>
                    ))}
                </Menu>
            ),
        };
    } else { // 需要 antd 4.20.0 以上版本
        dropdownProps = { overlay: <Menu {...langMenu} /> };
    }

    const inlineStyle = {
        cursor: "pointer",
        padding: "12px",
        display: "inline-flex",
        alignItems: "center",
        justifyContent: "center",
        fontSize: 18,
        verticalAlign: "middle",
        ...style,
    };

    return (
        <HeaderDropdown {...dropdownProps} placement="bottomRight" {...restProps}>
      <span className={globalIconClassName} style={inlineStyle}>
        <i className="anticon" title={allLangUIConfig[selectedLang]?.title}>
          { icon ?
              icon : (
                  <svg
                      viewBox="0 0 24 24"
                      focusable="false"
                      width="1em"
                      height="1em"
                      fill="currentColor"
                      aria-hidden="true"
                  >
                      <path d="M0 0h24v24H0z" fill="none" />
                      <path
                          d="M12.87 15.07l-2.54-2.51.03-.03c1.74-1.94 2.98-4.17 3.71-6.53H17V4h-7V2H8v2H1v1.99h11.17C11.5 7.92 10.44 9.75 9 11.35 8.07 10.32 7.3 9.19 6.69 8h-2c.73 1.63 1.73 3.17 2.98 4.56l-5.09 5.02L4 19l5-5 3.11 3.11.76-2.04zM18.5 10h-2L12 22h2l1.12-3h4.75L21 22h2l-4.5-12zm-2.62 7l1.62-4.33L19.12 17h-3.24z "
                          className="css-c4d79v"
                      />
                  </svg>
              )}
        </i>
      </span>
        </HeaderDropdown>
    );
    return <></>
};

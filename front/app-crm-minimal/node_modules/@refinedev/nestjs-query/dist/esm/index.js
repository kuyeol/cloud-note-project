import u from"camelcase";import*as l from"gql-query-builder";import{singular as p}from"pluralize";import b from"camelcase";import*as v from"gql-query-builder";import{singular as q}from"pluralize";import R from"lodash/set";var _={eq:"eq",ne:"neq",lt:"lt",gt:"gt",lte:"lte",gte:"gte",in:"in",nin:"notIn"},E=(r,e)=>{if(r==="contains")return{iLike:`%${e}%`};if(r==="ncontains")return{notILike:`%${e}%`};if(r==="startswith")return{iLike:`${e}%`};if(r==="nstartswith")return{notILike:`${e}%`};if(r==="endswith")return{iLike:`%${e}`};if(r==="nendswith")return{notILike:`%${e}`};if(r==="null")return{is:null};if(r==="nnull")return{isNot:null};if(r==="between"){if(!Array.isArray(e))throw new Error("Between operator requires an array");return e.length!==2?{}:{between:{lower:e[0],upper:e[1]}}}return{[_[r]]:e}},y=r=>{let e={};return r.filter(t=>Array.isArray(t.value)&&t.value.length===0?!1:!!t.value).map(t=>t.operator==="and"||t.operator==="or"?R(e,t.operator,[y(t.value)]):"field"in t?R(e,t.field,E(t.operator,t.value)):{}),e},$=r=>r.map(e=>({field:e.field,direction:e.order.toUpperCase()})),L=r=>{if(r.mode==="off")return{limit:2147483647};if(r.mode==="server"&&!(!r.current||!r.pageSize))return{limit:r.pageSize,offset:(r.current-1)*r.pageSize}},O=({resource:r,filters:e,meta:t})=>{let i=`created${b(q(r),{pascalCase:!0})}`,s={};e&&(s.input={type:b(`create_${q(r)}_subscription_filter_input`,{pascalCase:!0}),required:!0,value:{filter:y(e.filter(o=>!o.field.includes(".")))}});let{query:n,variables:a}=v.subscription({operation:i,fields:t.fields,variables:s});return{query:n,variables:a,operation:i}},x=({resource:r,filters:e,meta:t})=>{let i=`updatedOne${b(q(r),{pascalCase:!0})}`,s={};e&&(s.input={type:b(`update_one_${q(r)}_subscription_filter_input`,{pascalCase:!0}),required:!0,value:{filter:y(e.filter(o=>!o.field.includes(".")))}});let{query:n,variables:a}=v.subscription({operation:i,fields:t.fields,variables:s});return{query:n,variables:a,operation:i}},B=({resource:r,filters:e,meta:t})=>{let i=`deletedOne${b(q(r),{pascalCase:!0})}`,s={};e&&(s.input={type:b(`delete_one_${q(r)}_subscription_filter_input`,{pascalCase:!0}),required:!0,value:{filter:y(e.filter(o=>!o.field.includes(".")))}});let{query:n,variables:a}=v.subscription({operation:i,fields:t.fields.filter(o=>typeof o!="object"),variables:s});return{query:n,variables:a,operation:i}};var S=async(r,{resource:e,ids:t,meta:i})=>{let s=u(e),{query:n,variables:a}=l.query({operation:s,fields:[{nodes:(i==null?void 0:i.fields)||["id"]}],variables:{filter:{type:u(`${p(e)}Filter`,{pascalCase:!0}),required:!0,value:{id:{in:t}}}}});return{data:(await r.request(n,a))[s].nodes}},P=r=>({getList:async({resource:e,pagination:t,sorters:i,filters:s,meta:n})=>{let a=u(e),o=L(t||{}),f={};s&&(f.filter={type:u(`${p(e)}Filter`,{pascalCase:!0}),required:!0,value:y(s)}),i&&(f.sorting={type:u(`${p(e)}Sort`,{pascalCase:!0}),required:!0,list:[!0],value:$(i)}),o&&(f.paging={type:"OffsetPaging",required:!0,value:o});let{query:c,variables:g}=l.query({operation:a,fields:[{nodes:n==null?void 0:n.fields},"totalCount"],variables:f}),d=await r.request(c,g);return{data:d[a].nodes,total:d[a].totalCount}},getMany:async({resource:e,ids:t,meta:i})=>await S(r,{resource:e,ids:t,meta:i}),create:async({resource:e,variables:t,meta:i})=>{let s=`createOne${u(p(e),{pascalCase:!0})}`,{query:n,variables:a}=l.mutation({operation:s,fields:(i==null?void 0:i.fields)||["id"],variables:{input:{type:`CreateOne${u(p(e),{pascalCase:!0})}Input`,required:!0,value:{[u(p(e))]:t}}}});return{data:(await r.request(n,a))[s]}},createMany:async({resource:e,variables:t,meta:i})=>{let s=`createMany${u(e,{pascalCase:!0})}`,{query:n,variables:a}=l.mutation({operation:s,fields:(i==null?void 0:i.fields)||["id"],variables:{input:{type:`CreateMany${u(e,{pascalCase:!0})}Input`,required:!0,value:{[u(e)]:t}}}});return{data:(await r.request(n,a))[s]}},update:async({resource:e,id:t,variables:i,meta:s})=>{let n=`updateOne${u(p(e),{pascalCase:!0})}`,{query:a,variables:o}=l.mutation({operation:n,fields:(s==null?void 0:s.fields)||["id"],variables:{input:{type:`UpdateOne${u(p(e),{pascalCase:!0})}Input`,required:!0,value:{id:t,update:i}}}});return{data:(await r.request(a,o))[n]}},updateMany:async({resource:e,ids:t,variables:i,meta:s})=>{let n=`updateMany${u(e,{pascalCase:!0})}`,{query:a,variables:o}=l.mutation({operation:n,fields:["updatedCount"],variables:{input:{type:`UpdateMany${u(e,{pascalCase:!0})}Input`,required:!0,value:{filter:{id:{in:t}},update:i}}}});return await r.request(a,o),await S(r,{resource:e,ids:t,meta:s})},getOne:async({resource:e,id:t,meta:i})=>{let s=u(p(e)),{query:n,variables:a}=l.query({operation:s,fields:(i==null?void 0:i.fields)||["id"],variables:{id:{type:"ID",required:!0,value:t}}});return{data:(await r.request(n,a))[s]}},deleteOne:async({resource:e,id:t,meta:i})=>{let s=`deleteOne${u(p(e),{pascalCase:!0})}`,{query:n,variables:a}=l.mutation({operation:s,fields:(i==null?void 0:i.fields)||["id"],variables:{input:{type:`DeleteOne${u(p(e),{pascalCase:!0})}Input`,required:!0,value:{id:t}}}});return{data:(await r.request(n,a))[s]}},deleteMany:async({resource:e,ids:t,meta:i})=>{let s=`deleteMany${u(e,{pascalCase:!0})}`,{query:n,variables:a}=l.mutation({operation:s,fields:["deletedCount"],variables:{input:{type:`DeleteMany${u(e,{pascalCase:!0})}Input`,required:!0,value:{filter:{id:{in:t}}}}}});return await r.request(n,a),{data:[]}},getApiUrl:()=>{throw Error("Not implemented on refine-nestjs-query data provider.")},custom:async({url:e,method:t,headers:i,meta:s})=>{if(e&&r.setEndpoint(e),r.setHeaders(i),s!=null&&s.rawQuery)return{data:await r.request(s.rawQuery,s.variables)};if(s)if(s.operation)if(t==="get"){let{query:n,variables:a}=l.query({operation:s.operation,fields:s.fields,variables:s.variables});return{data:(await r.request(n,a))[s.operation]}}else{let{query:n,variables:a}=l.mutation({operation:s.operation,fields:s.fields,variables:s.variables});return{data:(await r.request(n,a))[s.operation]}}else throw Error("GraphQL operation name required.");else throw Error("GraphQL needs operation, fields and variables values in meta object.")}}),M=P;import*as X from"gql-query-builder";import{batchRequests as Z,gql as ee,GraphQLClient as re,rawRequest as te,request as se,resolveRequestDocument as ie}from"graphql-request";import*as ne from"graphql-ws";var C=(r,{callback:e,params:t},i)=>{let s={created:O,updated:x,deleted:B},{resource:n,meta:a,filters:o,subscriptionType:f,id:c,ids:g}=t??{},d=s[i],{operation:w,query:h,variables:m}=d({ids:g,id:c,resource:n,filters:o,meta:a,subscriptionType:f}),F=V=>{e(V.data[w])};return r.subscribe({query:h,variables:m},{next:F,error:console.error,complete:()=>null})},N=r=>({subscribe({callback:e,params:t}){let{resource:i,meta:s,filters:n,subscriptionType:a,id:o,ids:f}=t??{};if(!s)throw new Error("[useSubscription]: `meta` is required in `params` for graphql subscriptions");if(!a)throw new Error("[useSubscription]: `subscriptionType` is required in `params` for graphql subscriptions");if(!i)throw new Error("[useSubscription]: `resource` is required in `params` for graphql subscriptions");let c=[];if((t==null?void 0:t.subscriptionType)==="useList"){let d=C(r,{callback:e,params:t},"created"),w=C(r,{callback:e,params:t},"updated"),h=C(r,{callback:e,params:t},"deleted");c.push(d),c.push(w),c.push(h)}if((t==null?void 0:t.subscriptionType)==="useOne"){let d=C(r,{callback:e,params:t},"updated");c.push(d)}return()=>{c.forEach(d=>d())}},unsubscribe(e){e()}});var H=M;export{re as GraphQLClient,Z as batchRequests,H as default,ee as gql,ne as graphqlWS,N as liveProvider,X as qqlQueryBuilder,te as rawRequest,se as request,ie as resolveRequestDocument};
//# sourceMappingURL=index.js.map
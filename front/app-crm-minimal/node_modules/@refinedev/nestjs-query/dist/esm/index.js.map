{"version":3,"sources":["../../src/dataProvider/index.ts","../../src/utils/index.ts","../../src/index.ts","../../src/liveProvider/index.ts"],"sourcesContent":["import {\n    BaseKey,\n    BaseRecord,\n    DataProvider,\n    GetManyResponse,\n    LogicalFilter,\n    MetaQuery,\n} from \"@refinedev/core\";\nimport camelcase from \"camelcase\";\nimport * as gql from \"gql-query-builder\";\nimport VariableOptions from \"gql-query-builder/build/VariableOptions\";\nimport { GraphQLClient } from \"graphql-request\";\nimport { singular } from \"pluralize\";\nimport { generatePaging, generateFilters, generateSorting } from \"../utils\";\n\nconst handleGetMany = async <TData>(\n    client: GraphQLClient,\n    {\n        resource,\n        ids,\n        meta,\n    }: { resource: string; ids: BaseKey[]; meta?: MetaQuery },\n): Promise<GetManyResponse<TData>> => {\n    const operation = camelcase(resource);\n\n    const { query, variables } = gql.query({\n        operation,\n        fields: [{ nodes: meta?.fields || [\"id\"] }],\n        variables: {\n            filter: {\n                type: camelcase(`${singular(resource)}Filter`, {\n                    pascalCase: true,\n                }),\n                required: true,\n                value: {\n                    id: { in: ids },\n                },\n            },\n        },\n    });\n\n    const response = await client.request<BaseRecord>(query, variables);\n\n    return {\n        data: response[operation].nodes,\n    };\n};\n\nconst dataProvider = (client: GraphQLClient): Required<DataProvider> => {\n    return {\n        getList: async ({ resource, pagination, sorters, filters, meta }) => {\n            const operation = camelcase(resource);\n\n            const paging = generatePaging(pagination || {});\n\n            const queryVariables: VariableOptions = {};\n\n            if (filters) {\n                queryVariables[\"filter\"] = {\n                    type: camelcase(`${singular(resource)}Filter`, {\n                        pascalCase: true,\n                    }),\n                    required: true,\n                    value: generateFilters(filters as LogicalFilter[]),\n                };\n            }\n\n            if (sorters) {\n                queryVariables[\"sorting\"] = {\n                    type: camelcase(`${singular(resource)}Sort`, {\n                        pascalCase: true,\n                    }),\n                    required: true,\n                    list: [true],\n                    value: generateSorting(sorters),\n                };\n            }\n\n            if (paging) {\n                queryVariables[\"paging\"] = {\n                    type: \"OffsetPaging\",\n                    required: true,\n                    value: paging,\n                };\n            }\n\n            const { query, variables } = gql.query({\n                operation,\n                fields: [{ nodes: meta?.fields }, \"totalCount\"],\n                variables: queryVariables,\n            });\n\n            const response = await client.request<BaseRecord>(query, variables);\n\n            return {\n                data: response[operation].nodes,\n                total: response[operation].totalCount,\n            };\n        },\n\n        getMany: async ({ resource, ids, meta }) => {\n            return await handleGetMany(client, { resource, ids, meta });\n        },\n\n        create: async ({ resource, variables, meta }) => {\n            const operation = `createOne${camelcase(singular(resource), {\n                pascalCase: true,\n            })}`;\n\n            const { query, variables: queryVariables } = gql.mutation({\n                operation,\n                fields: meta?.fields || [\"id\"],\n                variables: {\n                    input: {\n                        type: `CreateOne${camelcase(singular(resource), {\n                            pascalCase: true,\n                        })}Input`,\n                        required: true,\n                        value: {\n                            [camelcase(singular(resource))]: variables,\n                        },\n                    },\n                },\n            });\n\n            const response = await client.request<BaseRecord>(\n                query,\n                queryVariables,\n            );\n\n            return {\n                data: response[operation],\n            };\n        },\n\n        createMany: async ({ resource, variables, meta }) => {\n            const operation = `createMany${camelcase(resource, {\n                pascalCase: true,\n            })}`;\n\n            const { query, variables: queryVariables } = gql.mutation({\n                operation,\n                fields: meta?.fields || [\"id\"],\n                variables: {\n                    input: {\n                        type: `CreateMany${camelcase(resource, {\n                            pascalCase: true,\n                        })}Input`,\n                        required: true,\n                        value: {\n                            [camelcase(resource)]: variables,\n                        },\n                    },\n                },\n            });\n\n            const response = await client.request<BaseRecord>(\n                query,\n                queryVariables,\n            );\n\n            return {\n                data: response[operation],\n            };\n        },\n        update: async ({ resource, id, variables, meta }) => {\n            const operation = `updateOne${camelcase(singular(resource), {\n                pascalCase: true,\n            })}`;\n\n            const { query, variables: queryVariables } = gql.mutation({\n                operation,\n                fields: meta?.fields || [\"id\"],\n                variables: {\n                    input: {\n                        type: `UpdateOne${camelcase(singular(resource), {\n                            pascalCase: true,\n                        })}Input`,\n                        required: true,\n                        value: {\n                            id,\n                            update: variables,\n                        },\n                    },\n                },\n            });\n\n            const response = await client.request<BaseRecord>(\n                query,\n                queryVariables,\n            );\n\n            return {\n                data: response[operation],\n            };\n        },\n\n        updateMany: async ({ resource, ids, variables, meta }) => {\n            const operation = `updateMany${camelcase(resource, {\n                pascalCase: true,\n            })}`;\n\n            const { query, variables: queryVariables } = gql.mutation({\n                operation,\n                fields: [\"updatedCount\"],\n                variables: {\n                    input: {\n                        type: `UpdateMany${camelcase(resource, {\n                            pascalCase: true,\n                        })}Input`,\n                        required: true,\n                        value: {\n                            filter: {\n                                id: { in: ids },\n                            },\n                            update: variables,\n                        },\n                    },\n                },\n            });\n\n            await client.request<BaseRecord>(query, queryVariables);\n\n            return await handleGetMany(client, { resource, ids, meta });\n        },\n        getOne: async ({ resource, id, meta }) => {\n            const operation = camelcase(singular(resource));\n\n            const { query, variables } = gql.query({\n                operation,\n                fields: meta?.fields || [\"id\"],\n                variables: {\n                    id: {\n                        type: \"ID\",\n                        required: true,\n                        value: id,\n                    },\n                },\n            });\n\n            const response = await client.request<BaseRecord>(query, variables);\n\n            return {\n                data: response[operation],\n            };\n        },\n        deleteOne: async ({ resource, id, meta }) => {\n            const operation = `deleteOne${camelcase(singular(resource), {\n                pascalCase: true,\n            })}`;\n\n            const { query, variables } = gql.mutation({\n                operation,\n                fields: meta?.fields || [\"id\"],\n                variables: {\n                    input: {\n                        type: `DeleteOne${camelcase(singular(resource), {\n                            pascalCase: true,\n                        })}Input`,\n                        required: true,\n                        value: {\n                            id,\n                        },\n                    },\n                },\n            });\n\n            const response = await client.request<BaseRecord>(query, variables);\n\n            return {\n                data: response[operation],\n            };\n        },\n        deleteMany: async ({ resource, ids, meta }) => {\n            const operation = `deleteMany${camelcase(resource, {\n                pascalCase: true,\n            })}`;\n\n            const { query, variables } = gql.mutation({\n                operation,\n                fields: [\"deletedCount\"],\n                variables: {\n                    input: {\n                        type: `DeleteMany${camelcase(resource, {\n                            pascalCase: true,\n                        })}Input`,\n                        required: true,\n                        value: {\n                            filter: {\n                                id: { in: ids },\n                            },\n                        },\n                    },\n                },\n            });\n\n            await client.request<BaseRecord>(query, variables);\n\n            return {\n                data: [],\n            };\n        },\n        getApiUrl: () => {\n            throw Error(\n                \"Not implemented on refine-nestjs-query data provider.\",\n            );\n        },\n        custom: async ({ url, method, headers, meta }) => {\n            if (url) {\n                client.setEndpoint(url);\n            }\n            client.setHeaders(headers);\n\n            if (meta?.rawQuery) {\n                const response = await client.request<BaseRecord>(\n                    meta.rawQuery,\n                    meta.variables,\n                );\n\n                return { data: response };\n            }\n\n            if (meta) {\n                if (meta.operation) {\n                    if (method === \"get\") {\n                        const { query, variables } = gql.query({\n                            operation: meta.operation,\n                            fields: meta.fields,\n                            variables: meta.variables,\n                        });\n\n                        const response = await client.request<BaseRecord>(\n                            query,\n                            variables,\n                        );\n\n                        return {\n                            data: response[meta.operation],\n                        };\n                    } else {\n                        const { query, variables } = gql.mutation({\n                            operation: meta.operation,\n                            fields: meta.fields,\n                            variables: meta.variables,\n                        });\n\n                        const response = await client.request<BaseRecord>(\n                            query,\n                            variables,\n                        );\n\n                        return {\n                            data: response[meta.operation],\n                        };\n                    }\n                } else {\n                    throw Error(\"GraphQL operation name required.\");\n                }\n            } else {\n                throw Error(\n                    \"GraphQL needs operation, fields and variables values in meta object.\",\n                );\n            }\n        },\n    };\n};\n\nexport default dataProvider;\n","import {\n    CrudOperators,\n    LogicalFilter,\n    CrudSorting,\n    Pagination,\n    CrudFilter,\n} from \"@refinedev/core\";\nimport camelcase from \"camelcase\";\nimport VariableOptions from \"gql-query-builder/build/VariableOptions\";\nimport * as gql from \"gql-query-builder\";\nimport { singular } from \"pluralize\";\nimport set from \"lodash/set\";\n\nconst operatorMap: { [key: string]: string } = {\n    eq: \"eq\",\n    ne: \"neq\",\n    lt: \"lt\",\n    gt: \"gt\",\n    lte: \"lte\",\n    gte: \"gte\",\n    in: \"in\",\n    nin: \"notIn\",\n};\n\nconst operatorMapper = (\n    operator: CrudOperators,\n    value: any,\n): { [key: string]: any } => {\n    if (operator === \"contains\") {\n        return { iLike: `%${value}%` };\n    }\n\n    if (operator === \"ncontains\") {\n        return { notILike: `%${value}%` };\n    }\n\n    if (operator === \"startswith\") {\n        return { iLike: `${value}%` };\n    }\n\n    if (operator === \"nstartswith\") {\n        return { notILike: `${value}%` };\n    }\n\n    if (operator === \"endswith\") {\n        return { iLike: `%${value}` };\n    }\n\n    if (operator === \"nendswith\") {\n        return { notILike: `%${value}` };\n    }\n\n    if (operator === \"null\") {\n        return { is: null };\n    }\n\n    if (operator === \"nnull\") {\n        return { isNot: null };\n    }\n\n    if (operator === \"between\") {\n        if (!Array.isArray(value)) {\n            throw new Error(\"Between operator requires an array\");\n        }\n\n        if (value.length !== 2) {\n            return {};\n        }\n\n        return { between: { lower: value[0], upper: value[1] } };\n    }\n\n    return { [operatorMap[operator]]: value };\n};\n\nexport const generateFilters = (filters: LogicalFilter[]) => {\n    const result: { [key: string]: { [key: string]: string | number } } = {};\n\n    filters\n        .filter((f) => {\n            if (Array.isArray(f.value) && f.value.length === 0) {\n                return false;\n            }\n\n            return !!f.value;\n        })\n        .map((filter: LogicalFilter | CrudFilter) => {\n            if (filter.operator === \"and\" || filter.operator === \"or\") {\n                return set(result, filter.operator, [\n                    generateFilters(filter.value as LogicalFilter[]),\n                ]);\n            } else if (\"field\" in filter) {\n                return set(\n                    result,\n                    filter.field,\n                    operatorMapper(filter.operator, filter.value),\n                );\n            } else {\n                return {};\n            }\n        });\n\n    return result;\n};\n\nexport const generateSorting = (sorters: CrudSorting) => {\n    return sorters.map((sorter) => {\n        return {\n            field: sorter.field,\n            direction: sorter.order.toUpperCase(),\n        };\n    });\n};\n\nexport const generatePaging = (pagination: Pagination) => {\n    // maximum value of 32 bit signed integer\n    if (pagination.mode === \"off\") return { limit: 2147483647 };\n\n    if (pagination.mode !== \"server\") return undefined;\n\n    if (!pagination.current || !pagination.pageSize) return undefined;\n\n    return {\n        limit: pagination.pageSize,\n        offset: (pagination.current - 1) * pagination.pageSize,\n    };\n};\n\nexport const generateCreatedSubscription = ({\n    resource,\n    filters,\n    meta,\n}: any) => {\n    const operation = `created${camelcase(singular(resource), {\n        pascalCase: true,\n    })}`;\n\n    const queryVariables: VariableOptions = {};\n\n    if (filters) {\n        queryVariables[\"input\"] = {\n            type: camelcase(\n                `create_${singular(resource)}_subscription_filter_input`,\n                {\n                    pascalCase: true,\n                },\n            ),\n            required: true,\n            value: {\n                filter: generateFilters(\n                    filters.filter(\n                        (filter: LogicalFilter) => !filter.field.includes(\".\"),\n                    ),\n                ),\n            },\n        };\n    }\n\n    const { query, variables } = gql.subscription({\n        operation,\n        fields: meta.fields,\n        variables: queryVariables,\n    });\n\n    return { query, variables, operation };\n};\n\nexport const generateUpdatedSubscription = ({\n    resource,\n    filters,\n    meta,\n}: any) => {\n    const operation = `updatedOne${camelcase(singular(resource), {\n        pascalCase: true,\n    })}`;\n\n    const queryVariables: VariableOptions = {};\n\n    if (filters) {\n        queryVariables[\"input\"] = {\n            type: camelcase(\n                `update_one_${singular(resource)}_subscription_filter_input`,\n                {\n                    pascalCase: true,\n                },\n            ),\n            required: true,\n            value: {\n                filter: generateFilters(\n                    filters.filter(\n                        (filter: LogicalFilter) => !filter.field.includes(\".\"),\n                    ),\n                ),\n            },\n        };\n    }\n\n    const { query, variables } = gql.subscription({\n        operation,\n        fields: meta.fields,\n        variables: queryVariables,\n    });\n\n    return { query, variables, operation };\n};\n\nexport const generateDeletedSubscription = ({\n    resource,\n    filters,\n    meta,\n}: any) => {\n    const operation = `deletedOne${camelcase(singular(resource), {\n        pascalCase: true,\n    })}`;\n\n    const queryVariables: VariableOptions = {};\n\n    if (filters) {\n        queryVariables[\"input\"] = {\n            type: camelcase(\n                `delete_one_${singular(resource)}_subscription_filter_input`,\n                {\n                    pascalCase: true,\n                },\n            ),\n            required: true,\n            value: {\n                filter: generateFilters(\n                    filters.filter(\n                        (filter: LogicalFilter) => !filter.field.includes(\".\"),\n                    ),\n                ),\n            },\n        };\n    }\n\n    const { query, variables } = gql.subscription({\n        operation,\n        fields: meta.fields.filter(\n            (field: string | object) => typeof field !== \"object\",\n        ),\n        variables: queryVariables,\n    });\n\n    return { query, variables, operation };\n};\n","import dataProvider from \"./dataProvider\";\nexport default dataProvider;\n\nexport * as qqlQueryBuilder from \"gql-query-builder\";\nexport {\n    batchRequests,\n    gql,\n    GraphQLClient,\n    rawRequest,\n    request,\n    resolveRequestDocument,\n} from \"graphql-request\";\nexport type {\n    BatchRequestDocument,\n    BatchRequestsExtendedOptions,\n    BatchRequestsOptions,\n    ClientError,\n    GraphQLWebSocketClient,\n    RawRequestExtendedOptions,\n    RawRequestOptions,\n    RequestDocument,\n    RequestExtendedOptions,\n    RequestOptions,\n    Variables,\n} from \"graphql-request\";\nexport * as graphqlWS from \"graphql-ws\";\nexport * from \"./dataProvider\";\nexport * from \"./liveProvider\";\n","import { LiveProvider } from \"@refinedev/core\";\nimport { Client } from \"graphql-ws\";\nimport {\n    generateCreatedSubscription,\n    generateDeletedSubscription,\n    generateUpdatedSubscription,\n} from \"../utils\";\n\nconst generateSubscription = (\n    client: Client,\n    { callback, params }: any,\n    type: string,\n) => {\n    const generatorMap: any = {\n        created: generateCreatedSubscription,\n        updated: generateUpdatedSubscription,\n        deleted: generateDeletedSubscription,\n    };\n\n    const { resource, meta, filters, subscriptionType, id, ids } = params ?? {};\n\n    const generator = generatorMap[type];\n\n    const { operation, query, variables } = generator({\n        ids,\n        id,\n        resource,\n        filters,\n        meta,\n        subscriptionType,\n    });\n\n    const onNext = (payload: any) => {\n        callback(payload.data[operation]);\n    };\n\n    const unsubscribe = client.subscribe(\n        { query, variables },\n        {\n            next: onNext,\n            error: console.error,\n            complete: () => null,\n        },\n    );\n\n    return unsubscribe;\n};\n\nexport const liveProvider = (client: Client): LiveProvider => {\n    return {\n        subscribe({ callback, params }) {\n            const { resource, meta, filters, subscriptionType, id, ids } =\n                params ?? {};\n\n            if (!meta) {\n                throw new Error(\n                    \"[useSubscription]: `meta` is required in `params` for graphql subscriptions\",\n                );\n            }\n\n            if (!subscriptionType) {\n                throw new Error(\n                    \"[useSubscription]: `subscriptionType` is required in `params` for graphql subscriptions\",\n                );\n            }\n\n            if (!resource) {\n                throw new Error(\n                    \"[useSubscription]: `resource` is required in `params` for graphql subscriptions\",\n                );\n            }\n\n            const unsubscribes: any[] = [];\n\n            if (params?.subscriptionType === \"useList\") {\n                const createdUnsubscribe = generateSubscription(\n                    client,\n                    { callback, params },\n                    \"created\",\n                );\n\n                const updatedUnsubscribe = generateSubscription(\n                    client,\n                    { callback, params },\n                    \"updated\",\n                );\n\n                const deletedUnsubscribe = generateSubscription(\n                    client,\n                    { callback, params },\n                    \"deleted\",\n                );\n\n                unsubscribes.push(createdUnsubscribe);\n                unsubscribes.push(updatedUnsubscribe);\n                unsubscribes.push(deletedUnsubscribe);\n            }\n\n            if (params?.subscriptionType === \"useOne\") {\n                const updatedUnsubscribe = generateSubscription(\n                    client,\n                    { callback, params },\n                    \"updated\",\n                );\n\n                unsubscribes.push(updatedUnsubscribe);\n            }\n\n            const unsubscribe = () => {\n                unsubscribes.forEach((unsubscribe) => unsubscribe());\n            };\n\n            return unsubscribe;\n        },\n        unsubscribe(unsubscribe) {\n            unsubscribe();\n        },\n    };\n};\n"],"mappings":"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","names":["camelcase","gql","singular","camelcase","gql","singular","set","operatorMap","operatorMapper","operator","value","generateFilters","filters","result","f","filter","generateSorting","sorters","sorter","generatePaging","pagination","generateCreatedSubscription","resource","meta","operation","queryVariables","query","variables","generateUpdatedSubscription","generateDeletedSubscription","field","handleGetMany","client","resource","ids","meta","operation","camelcase","query","variables","singular","dataProvider","pagination","sorters","filters","paging","generatePaging","queryVariables","generateFilters","generateSorting","response","id","url","method","headers","dataProvider_default","qqlQueryBuilder","batchRequests","gql","GraphQLClient","rawRequest","request","resolveRequestDocument","graphqlWS","generateSubscription","client","callback","params","type","generatorMap","generateCreatedSubscription","generateUpdatedSubscription","generateDeletedSubscription","resource","meta","filters","subscriptionType","id","ids","generator","operation","query","variables","onNext","payload","liveProvider","unsubscribes","createdUnsubscribe","updatedUnsubscribe","deletedUnsubscribe","unsubscribe","src_default","dataProvider_default"]}
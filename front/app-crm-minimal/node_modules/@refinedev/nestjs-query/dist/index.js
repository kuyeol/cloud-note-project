var Q=Object.create;var w=Object.defineProperty;var I=Object.getOwnPropertyDescriptor;var G=Object.getOwnPropertyNames;var U=Object.getPrototypeOf,k=Object.prototype.hasOwnProperty;var T=(r,e)=>{for(var t in e)w(r,t,{get:e[t],enumerable:!0})},x=(r,e,t,i)=>{if(e&&typeof e=="object"||typeof e=="function")for(let s of G(e))!k.call(r,s)&&s!==t&&w(r,s,{get:()=>e[s],enumerable:!(i=I(e,s))||i.enumerable});return r};var q=(r,e,t)=>(t=r!=null?Q(U(r)):{},x(e||!r||!r.__esModule?w(t,"default",{value:r,enumerable:!0}):t,r)),A=r=>x(w({},"__esModule",{value:!0}),r);var H={};T(H,{GraphQLClient:()=>d.GraphQLClient,batchRequests:()=>d.batchRequests,default:()=>W,gql:()=>d.gql,graphqlWS:()=>X,liveProvider:()=>K,qqlQueryBuilder:()=>J,rawRequest:()=>d.rawRequest,request:()=>d.request,resolveRequestDocument:()=>d.resolveRequestDocument});module.exports=A(H);var u=q(require("camelcase")),l=q(require("gql-query-builder")),p=require("pluralize");var y=q(require("camelcase")),h=q(require("gql-query-builder")),g=require("pluralize"),O=q(require("lodash/set")),j={eq:"eq",ne:"neq",lt:"lt",gt:"gt",lte:"lte",gte:"gte",in:"in",nin:"notIn"},z=(r,e)=>{if(r==="contains")return{iLike:`%${e}%`};if(r==="ncontains")return{notILike:`%${e}%`};if(r==="startswith")return{iLike:`${e}%`};if(r==="nstartswith")return{notILike:`${e}%`};if(r==="endswith")return{iLike:`%${e}`};if(r==="nendswith")return{notILike:`%${e}`};if(r==="null")return{is:null};if(r==="nnull")return{isNot:null};if(r==="between"){if(!Array.isArray(e))throw new Error("Between operator requires an array");return e.length!==2?{}:{between:{lower:e[0],upper:e[1]}}}return{[j[r]]:e}},v=r=>{let e={};return r.filter(t=>Array.isArray(t.value)&&t.value.length===0?!1:!!t.value).map(t=>t.operator==="and"||t.operator==="or"?(0,O.default)(e,t.operator,[v(t.value)]):"field"in t?(0,O.default)(e,t.field,z(t.operator,t.value)):{}),e},B=r=>r.map(e=>({field:e.field,direction:e.order.toUpperCase()})),S=r=>{if(r.mode==="off")return{limit:2147483647};if(r.mode==="server"&&!(!r.current||!r.pageSize))return{limit:r.pageSize,offset:(r.current-1)*r.pageSize}},M=({resource:r,filters:e,meta:t})=>{let i=`created${(0,y.default)((0,g.singular)(r),{pascalCase:!0})}`,s={};e&&(s.input={type:(0,y.default)(`create_${(0,g.singular)(r)}_subscription_filter_input`,{pascalCase:!0}),required:!0,value:{filter:v(e.filter(o=>!o.field.includes(".")))}});let{query:n,variables:a}=h.subscription({operation:i,fields:t.fields,variables:s});return{query:n,variables:a,operation:i}},m=({resource:r,filters:e,meta:t})=>{let i=`updatedOne${(0,y.default)((0,g.singular)(r),{pascalCase:!0})}`,s={};e&&(s.input={type:(0,y.default)(`update_one_${(0,g.singular)(r)}_subscription_filter_input`,{pascalCase:!0}),required:!0,value:{filter:v(e.filter(o=>!o.field.includes(".")))}});let{query:n,variables:a}=h.subscription({operation:i,fields:t.fields,variables:s});return{query:n,variables:a,operation:i}},F=({resource:r,filters:e,meta:t})=>{let i=`deletedOne${(0,y.default)((0,g.singular)(r),{pascalCase:!0})}`,s={};e&&(s.input={type:(0,y.default)(`delete_one_${(0,g.singular)(r)}_subscription_filter_input`,{pascalCase:!0}),required:!0,value:{filter:v(e.filter(o=>!o.field.includes(".")))}});let{query:n,variables:a}=h.subscription({operation:i,fields:t.fields.filter(o=>typeof o!="object"),variables:s});return{query:n,variables:a,operation:i}};var V=async(r,{resource:e,ids:t,meta:i})=>{let s=(0,u.default)(e),{query:n,variables:a}=l.query({operation:s,fields:[{nodes:(i==null?void 0:i.fields)||["id"]}],variables:{filter:{type:(0,u.default)(`${(0,p.singular)(e)}Filter`,{pascalCase:!0}),required:!0,value:{id:{in:t}}}}});return{data:(await r.request(n,a))[s].nodes}},N=r=>({getList:async({resource:e,pagination:t,sorters:i,filters:s,meta:n})=>{let a=(0,u.default)(e),o=S(t||{}),b={};s&&(b.filter={type:(0,u.default)(`${(0,p.singular)(e)}Filter`,{pascalCase:!0}),required:!0,value:v(s)}),i&&(b.sorting={type:(0,u.default)(`${(0,p.singular)(e)}Sort`,{pascalCase:!0}),required:!0,list:[!0],value:B(i)}),o&&(b.paging={type:"OffsetPaging",required:!0,value:o});let{query:f,variables:C}=l.query({operation:a,fields:[{nodes:n==null?void 0:n.fields},"totalCount"],variables:b}),c=await r.request(f,C);return{data:c[a].nodes,total:c[a].totalCount}},getMany:async({resource:e,ids:t,meta:i})=>await V(r,{resource:e,ids:t,meta:i}),create:async({resource:e,variables:t,meta:i})=>{let s=`createOne${(0,u.default)((0,p.singular)(e),{pascalCase:!0})}`,{query:n,variables:a}=l.mutation({operation:s,fields:(i==null?void 0:i.fields)||["id"],variables:{input:{type:`CreateOne${(0,u.default)((0,p.singular)(e),{pascalCase:!0})}Input`,required:!0,value:{[(0,u.default)((0,p.singular)(e))]:t}}}});return{data:(await r.request(n,a))[s]}},createMany:async({resource:e,variables:t,meta:i})=>{let s=`createMany${(0,u.default)(e,{pascalCase:!0})}`,{query:n,variables:a}=l.mutation({operation:s,fields:(i==null?void 0:i.fields)||["id"],variables:{input:{type:`CreateMany${(0,u.default)(e,{pascalCase:!0})}Input`,required:!0,value:{[(0,u.default)(e)]:t}}}});return{data:(await r.request(n,a))[s]}},update:async({resource:e,id:t,variables:i,meta:s})=>{let n=`updateOne${(0,u.default)((0,p.singular)(e),{pascalCase:!0})}`,{query:a,variables:o}=l.mutation({operation:n,fields:(s==null?void 0:s.fields)||["id"],variables:{input:{type:`UpdateOne${(0,u.default)((0,p.singular)(e),{pascalCase:!0})}Input`,required:!0,value:{id:t,update:i}}}});return{data:(await r.request(a,o))[n]}},updateMany:async({resource:e,ids:t,variables:i,meta:s})=>{let n=`updateMany${(0,u.default)(e,{pascalCase:!0})}`,{query:a,variables:o}=l.mutation({operation:n,fields:["updatedCount"],variables:{input:{type:`UpdateMany${(0,u.default)(e,{pascalCase:!0})}Input`,required:!0,value:{filter:{id:{in:t}},update:i}}}});return await r.request(a,o),await V(r,{resource:e,ids:t,meta:s})},getOne:async({resource:e,id:t,meta:i})=>{let s=(0,u.default)((0,p.singular)(e)),{query:n,variables:a}=l.query({operation:s,fields:(i==null?void 0:i.fields)||["id"],variables:{id:{type:"ID",required:!0,value:t}}});return{data:(await r.request(n,a))[s]}},deleteOne:async({resource:e,id:t,meta:i})=>{let s=`deleteOne${(0,u.default)((0,p.singular)(e),{pascalCase:!0})}`,{query:n,variables:a}=l.mutation({operation:s,fields:(i==null?void 0:i.fields)||["id"],variables:{input:{type:`DeleteOne${(0,u.default)((0,p.singular)(e),{pascalCase:!0})}Input`,required:!0,value:{id:t}}}});return{data:(await r.request(n,a))[s]}},deleteMany:async({resource:e,ids:t,meta:i})=>{let s=`deleteMany${(0,u.default)(e,{pascalCase:!0})}`,{query:n,variables:a}=l.mutation({operation:s,fields:["deletedCount"],variables:{input:{type:`DeleteMany${(0,u.default)(e,{pascalCase:!0})}Input`,required:!0,value:{filter:{id:{in:t}}}}}});return await r.request(n,a),{data:[]}},getApiUrl:()=>{throw Error("Not implemented on refine-nestjs-query data provider.")},custom:async({url:e,method:t,headers:i,meta:s})=>{if(e&&r.setEndpoint(e),r.setHeaders(i),s!=null&&s.rawQuery)return{data:await r.request(s.rawQuery,s.variables)};if(s)if(s.operation)if(t==="get"){let{query:n,variables:a}=l.query({operation:s.operation,fields:s.fields,variables:s.variables});return{data:(await r.request(n,a))[s.operation]}}else{let{query:n,variables:a}=l.mutation({operation:s.operation,fields:s.fields,variables:s.variables});return{data:(await r.request(n,a))[s.operation]}}else throw Error("GraphQL operation name required.");else throw Error("GraphQL needs operation, fields and variables values in meta object.")}}),_=N;var J=q(require("gql-query-builder")),d=require("graphql-request"),X=q(require("graphql-ws"));var R=(r,{callback:e,params:t},i)=>{let s={created:M,updated:m,deleted:F},{resource:n,meta:a,filters:o,subscriptionType:b,id:f,ids:C}=t??{},c=s[i],{operation:$,query:L,variables:E}=c({ids:C,id:f,resource:n,filters:o,meta:a,subscriptionType:b}),P=D=>{e(D.data[$])};return r.subscribe({query:L,variables:E},{next:P,error:console.error,complete:()=>null})},K=r=>({subscribe({callback:e,params:t}){let{resource:i,meta:s,filters:n,subscriptionType:a,id:o,ids:b}=t??{};if(!s)throw new Error("[useSubscription]: `meta` is required in `params` for graphql subscriptions");if(!a)throw new Error("[useSubscription]: `subscriptionType` is required in `params` for graphql subscriptions");if(!i)throw new Error("[useSubscription]: `resource` is required in `params` for graphql subscriptions");let f=[];if((t==null?void 0:t.subscriptionType)==="useList"){let c=R(r,{callback:e,params:t},"created"),$=R(r,{callback:e,params:t},"updated"),L=R(r,{callback:e,params:t},"deleted");f.push(c),f.push($),f.push(L)}if((t==null?void 0:t.subscriptionType)==="useOne"){let c=R(r,{callback:e,params:t},"updated");f.push(c)}return()=>{f.forEach(c=>c())}},unsubscribe(e){e()}});var W=_;
//# sourceMappingURL=index.js.map
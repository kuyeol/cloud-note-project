(()=>{var J=Object.create;var _=Object.defineProperty;var X=Object.getOwnPropertyDescriptor;var Y=Object.getOwnPropertyNames;var Z=Object.getPrototypeOf,ee=Object.prototype.hasOwnProperty;var f=(r=>typeof require<"u"?require:typeof Proxy<"u"?new Proxy(r,{get:(e,t)=>(typeof require<"u"?require:e)[t]}):r)(function(r){if(typeof require<"u")return require.apply(this,arguments);throw new Error('Dynamic require of "'+r+'" is not supported')});var re=(r,e,t,s)=>{if(e&&typeof e=="object"||typeof e=="function")for(let i of Y(e))!ee.call(r,i)&&i!==t&&_(r,i,{get:()=>e[i],enumerable:!(s=X(e,i))||s.enumerable});return r};var w=(r,e,t)=>(t=r!=null?J(Z(r)):{},re(e||!r||!r.__esModule?_(t,"default",{value:r,enumerable:!0}):t,r));var d=w(f("camelcase")),b=w(f("gql-query-builder")),g=f("pluralize");var O=w(f("camelcase")),A=w(f("gql-query-builder")),$=f("pluralize"),F=w(f("lodash/set")),te={eq:"eq",ne:"neq",lt:"lt",gt:"gt",lte:"lte",gte:"gte",in:"in",nin:"notIn"},se=(r,e)=>{if(r==="contains")return{iLike:`%${e}%`};if(r==="ncontains")return{notILike:`%${e}%`};if(r==="startswith")return{iLike:`${e}%`};if(r==="nstartswith")return{notILike:`${e}%`};if(r==="endswith")return{iLike:`%${e}`};if(r==="nendswith")return{notILike:`%${e}`};if(r==="null")return{is:null};if(r==="nnull")return{isNot:null};if(r==="between"){if(!Array.isArray(e))throw new Error("Between operator requires an array");return e.length!==2?{}:{between:{lower:e[0],upper:e[1]}}}return{[te[r]]:e}},x=r=>{let e={};return r.filter(t=>Array.isArray(t.value)&&t.value.length===0?!1:!!t.value).map(t=>t.operator==="and"||t.operator==="or"?(0,F.default)(e,t.operator,[x(t.value)]):"field"in t?(0,F.default)(e,t.field,se(t.operator,t.value)):{}),e},D=r=>r.map(e=>({field:e.field,direction:e.order.toUpperCase()})),V=r=>{if(r.mode==="off")return{limit:2147483647};if(r.mode==="server"&&!(!r.current||!r.pageSize))return{limit:r.pageSize,offset:(r.current-1)*r.pageSize}},Q=({resource:r,filters:e,meta:t})=>{let s=`created${(0,O.default)((0,$.singular)(r),{pascalCase:!0})}`,i={};e&&(i.input={type:(0,O.default)(`create_${(0,$.singular)(r)}_subscription_filter_input`,{pascalCase:!0}),required:!0,value:{filter:x(e.filter(a=>!a.field.includes(".")))}});let{query:n,variables:o}=A.subscription({operation:s,fields:t.fields,variables:i});return{query:n,variables:o,operation:s}},T=({resource:r,filters:e,meta:t})=>{let s=`updatedOne${(0,O.default)((0,$.singular)(r),{pascalCase:!0})}`,i={};e&&(i.input={type:(0,O.default)(`update_one_${(0,$.singular)(r)}_subscription_filter_input`,{pascalCase:!0}),required:!0,value:{filter:x(e.filter(a=>!a.field.includes(".")))}});let{query:n,variables:o}=A.subscription({operation:s,fields:t.fields,variables:i});return{query:n,variables:o,operation:s}},U=({resource:r,filters:e,meta:t})=>{let s=`deletedOne${(0,O.default)((0,$.singular)(r),{pascalCase:!0})}`,i={};e&&(i.input={type:(0,O.default)(`delete_one_${(0,$.singular)(r)}_subscription_filter_input`,{pascalCase:!0}),required:!0,value:{filter:x(e.filter(a=>!a.field.includes(".")))}});let{query:n,variables:o}=A.subscription({operation:s,fields:t.fields.filter(a=>typeof a!="object"),variables:i});return{query:n,variables:o,operation:s}};var N=async(r,{resource:e,ids:t,meta:s})=>{let i=(0,d.default)(e),{query:n,variables:o}=b.query({operation:i,fields:[{nodes:(s==null?void 0:s.fields)||["id"]}],variables:{filter:{type:(0,d.default)(`${(0,g.singular)(e)}Filter`,{pascalCase:!0}),required:!0,value:{id:{in:t}}}}});return{data:(await r.request(n,o))[i].nodes}},ie=r=>({getList:async({resource:e,pagination:t,sorters:s,filters:i,meta:n})=>{let o=(0,d.default)(e),a=V(t||{}),u={};i&&(u.filter={type:(0,d.default)(`${(0,g.singular)(e)}Filter`,{pascalCase:!0}),required:!0,value:x(i)}),s&&(u.sorting={type:(0,d.default)(`${(0,g.singular)(e)}Sort`,{pascalCase:!0}),required:!0,list:[!0],value:D(s)}),a&&(u.paging={type:"OffsetPaging",required:!0,value:a});let{query:p,variables:c}=b.query({operation:o,fields:[{nodes:n==null?void 0:n.fields},"totalCount"],variables:u}),l=await r.request(p,c);return{data:l[o].nodes,total:l[o].totalCount}},getMany:async({resource:e,ids:t,meta:s})=>await N(r,{resource:e,ids:t,meta:s}),create:async({resource:e,variables:t,meta:s})=>{let i=`createOne${(0,d.default)((0,g.singular)(e),{pascalCase:!0})}`,{query:n,variables:o}=b.mutation({operation:i,fields:(s==null?void 0:s.fields)||["id"],variables:{input:{type:`CreateOne${(0,d.default)((0,g.singular)(e),{pascalCase:!0})}Input`,required:!0,value:{[(0,d.default)((0,g.singular)(e))]:t}}}});return{data:(await r.request(n,o))[i]}},createMany:async({resource:e,variables:t,meta:s})=>{let i=`createMany${(0,d.default)(e,{pascalCase:!0})}`,{query:n,variables:o}=b.mutation({operation:i,fields:(s==null?void 0:s.fields)||["id"],variables:{input:{type:`CreateMany${(0,d.default)(e,{pascalCase:!0})}Input`,required:!0,value:{[(0,d.default)(e)]:t}}}});return{data:(await r.request(n,o))[i]}},update:async({resource:e,id:t,variables:s,meta:i})=>{let n=`updateOne${(0,d.default)((0,g.singular)(e),{pascalCase:!0})}`,{query:o,variables:a}=b.mutation({operation:n,fields:(i==null?void 0:i.fields)||["id"],variables:{input:{type:`UpdateOne${(0,d.default)((0,g.singular)(e),{pascalCase:!0})}Input`,required:!0,value:{id:t,update:s}}}});return{data:(await r.request(o,a))[n]}},updateMany:async({resource:e,ids:t,variables:s,meta:i})=>{let n=`updateMany${(0,d.default)(e,{pascalCase:!0})}`,{query:o,variables:a}=b.mutation({operation:n,fields:["updatedCount"],variables:{input:{type:`UpdateMany${(0,d.default)(e,{pascalCase:!0})}Input`,required:!0,value:{filter:{id:{in:t}},update:s}}}});return await r.request(o,a),await N(r,{resource:e,ids:t,meta:i})},getOne:async({resource:e,id:t,meta:s})=>{let i=(0,d.default)((0,g.singular)(e)),{query:n,variables:o}=b.query({operation:i,fields:(s==null?void 0:s.fields)||["id"],variables:{id:{type:"ID",required:!0,value:t}}});return{data:(await r.request(n,o))[i]}},deleteOne:async({resource:e,id:t,meta:s})=>{let i=`deleteOne${(0,d.default)((0,g.singular)(e),{pascalCase:!0})}`,{query:n,variables:o}=b.mutation({operation:i,fields:(s==null?void 0:s.fields)||["id"],variables:{input:{type:`DeleteOne${(0,d.default)((0,g.singular)(e),{pascalCase:!0})}Input`,required:!0,value:{id:t}}}});return{data:(await r.request(n,o))[i]}},deleteMany:async({resource:e,ids:t,meta:s})=>{let i=`deleteMany${(0,d.default)(e,{pascalCase:!0})}`,{query:n,variables:o}=b.mutation({operation:i,fields:["deletedCount"],variables:{input:{type:`DeleteMany${(0,d.default)(e,{pascalCase:!0})}Input`,required:!0,value:{filter:{id:{in:t}}}}}});return await r.request(n,o),{data:[]}},getApiUrl:()=>{throw Error("Not implemented on refine-nestjs-query data provider.")},custom:async({url:e,method:t,headers:s,meta:i})=>{if(e&&r.setEndpoint(e),r.setHeaders(s),i!=null&&i.rawQuery)return{data:await r.request(i.rawQuery,i.variables)};if(i)if(i.operation)if(t==="get"){let{query:n,variables:o}=b.query({operation:i.operation,fields:i.fields,variables:i.variables});return{data:(await r.request(n,o))[i.operation]}}else{let{query:n,variables:o}=b.mutation({operation:i.operation,fields:i.fields,variables:i.variables});return{data:(await r.request(n,o))[i.operation]}}else throw Error("GraphQL operation name required.");else throw Error("GraphQL needs operation, fields and variables values in meta object.")}}),z=ie;var $e=w(f("gql-query-builder"));var G=w(f("./createRequestBody.js"),1),I=f("./defaultJsonSerializer.js"),B=f("./helpers.js"),v=f("./parseArgs.js"),M=f("./resolveRequestDocument.js"),W=f("./types.js"),m=w(f("cross-fetch"),1),fe=f("./graphql-ws.js"),K=f("./resolveRequestDocument.js");var S=r=>{let e={};return r&&(typeof Headers<"u"&&r instanceof Headers||m&&m.Headers&&r instanceof m.Headers?e=(0,B.HeadersInstanceToPlainObject)(r):Array.isArray(r)?r.forEach(([t,s])=>{t&&s!==void 0&&(e[t]=s)}):e=r),e},k=r=>r.replace(/([\s,]|#[^\n\r]+)+/g," ").trim(),ne=r=>{if(!Array.isArray(r.query)){let s=r,i=[`query=${encodeURIComponent(k(s.query))}`];return r.variables&&i.push(`variables=${encodeURIComponent(s.jsonSerializer.stringify(s.variables))}`),s.operationName&&i.push(`operationName=${encodeURIComponent(s.operationName)}`),i.join("&")}if(typeof r.variables<"u"&&!Array.isArray(r.variables))throw new Error("Cannot create query with given variable type, array expected");let e=r,t=r.query.reduce((s,i,n)=>(s.push({query:k(i),variables:e.variables?e.jsonSerializer.stringify(e.variables[n]):void 0}),s),[]);return`query=${encodeURIComponent(e.jsonSerializer.stringify(t))}`},ae=r=>async e=>{let{url:t,query:s,variables:i,operationName:n,fetch:o,fetchOptions:a,middleware:u}=e,p={...e.headers},c="",l;r==="POST"?(l=(0,G.default)(s,i,n,a.jsonSerializer),typeof l=="string"&&(p["Content-Type"]="application/json")):c=ne({query:s,variables:i,operationName:n,jsonSerializer:a.jsonSerializer??I.defaultJsonSerializer});let q={method:r,headers:p,body:l,...a},y=t,C=q;if(u){let h=await Promise.resolve(u({...q,url:t,operationName:n,variables:i})),{url:R,...E}=h;y=R,C=E}return c&&(y=`${y}?${c}`),await o(y,C)},L=class{constructor(e,t={}){this.url=e,this.requestConfig=t,this.rawRequest=async(...s)=>{let[i,n,o]=s,a=(0,v.parseRawRequestArgs)(i,n,o),{headers:u,fetch:p=m.default,method:c="POST",requestMiddleware:l,responseMiddleware:q,...y}=this.requestConfig,{url:C}=this;a.signal!==void 0&&(y.signal=a.signal);let{operationName:h}=(0,M.resolveRequestDocument)(a.query);return H({url:C,query:a.query,variables:a.variables,headers:{...S(j(u)),...S(a.requestHeaders)},operationName:h,fetch:p,method:c,fetchOptions:y,middleware:l}).then(R=>(q&&q(R),R)).catch(R=>{throw q&&q(R),R})}}async request(e,...t){let[s,i]=t,n=(0,v.parseRequestArgs)(e,s,i),{headers:o,fetch:a=m.default,method:u="POST",requestMiddleware:p,responseMiddleware:c,...l}=this.requestConfig,{url:q}=this;n.signal!==void 0&&(l.signal=n.signal);let{query:y,operationName:C}=(0,M.resolveRequestDocument)(n.document);return H({url:q,query:y,variables:n.variables,headers:{...S(j(o)),...S(n.requestHeaders)},operationName:C,fetch:a,method:u,fetchOptions:l,middleware:p}).then(h=>(c&&c(h),h.data)).catch(h=>{throw c&&c(h),h})}batchRequests(e,t){let s=(0,v.parseBatchRequestArgs)(e,t),{headers:i,...n}=this.requestConfig;s.signal!==void 0&&(n.signal=s.signal);let o=s.documents.map(({document:u})=>(0,M.resolveRequestDocument)(u).query),a=s.documents.map(({variables:u})=>u);return H({url:this.url,query:o,variables:a,headers:{...S(j(i)),...S(s.requestHeaders)},operationName:void 0,fetch:this.requestConfig.fetch??m.default,method:this.requestConfig.method||"POST",fetchOptions:n,middleware:this.requestConfig.requestMiddleware}).then(u=>(this.requestConfig.responseMiddleware&&this.requestConfig.responseMiddleware(u),u.data)).catch(u=>{throw this.requestConfig.responseMiddleware&&this.requestConfig.responseMiddleware(u),u})}setHeaders(e){return this.requestConfig.headers=e,this}setHeader(e,t){let{headers:s}=this.requestConfig;return s?s[e]=t:this.requestConfig.headers={[e]:t},this}setEndpoint(e){return this.url=e,this}},H=async r=>{let{query:e,variables:t,fetchOptions:s}=r,i=ae((0,B.uppercase)(r.method??"post")),n=Array.isArray(r.query),o=await i(r),a=await ce(o,s.jsonSerializer??I.defaultJsonSerializer),u=Array.isArray(a)?!a.some(({data:c})=>!c):!!a.data,p=Array.isArray(a)||!a.errors||Array.isArray(a.errors)&&!a.errors.length||s.errorPolicy==="all"||s.errorPolicy==="ignore";if(o.ok&&p&&u){let{errors:c,...l}=(Array.isArray(a),a),q=s.errorPolicy==="ignore"?l:a;return{...n?{data:q}:q,headers:o.headers,status:o.status}}else{let c=typeof a=="string"?{error:a}:a;throw new W.ClientError({...c,status:o.status,headers:o.headers},{query:e,variables:t})}},oe=async(...r)=>{let[e,t,...s]=r,i=(0,v.parseRawRequestExtendedArgs)(e,t,...s);return new L(i.url).rawRequest({...i})};async function ue(r,e,...t){let s=(0,v.parseRequestExtendedArgs)(r,e,...t);return new L(s.url).request({...s})}var le=async(...r)=>{let e=de(r);return new L(e.url).batchRequests(e)},de=r=>r.length===1?r[0]:{url:r[0],documents:r[1],requestHeaders:r[2],signal:void 0};var ce=async(r,e)=>{let t;return r.headers.forEach((s,i)=>{i.toLowerCase()==="content-type"&&(t=s)}),t&&(t.toLowerCase().startsWith("application/json")||t.toLowerCase().startsWith("application/graphql+json")||t.toLowerCase().startsWith("application/graphql-response+json"))?e.parse(await r.text()):r.text()},j=r=>typeof r=="function"?r():r,pe=(r,...e)=>r.reduce((t,s,i)=>`${t}${s}${i in e?e[i]:""}`,"");var Se=w(f("graphql-ws"));var P=(r,{callback:e,params:t},s)=>{let i={created:Q,updated:T,deleted:U},{resource:n,meta:o,filters:a,subscriptionType:u,id:p,ids:c}=t??{},l=i[s],{operation:q,query:y,variables:C}=l({ids:c,id:p,resource:n,filters:a,meta:o,subscriptionType:u}),h=E=>{e(E.data[q])};return r.subscribe({query:y,variables:C},{next:h,error:console.error,complete:()=>null})},we=r=>({subscribe({callback:e,params:t}){let{resource:s,meta:i,filters:n,subscriptionType:o,id:a,ids:u}=t??{};if(!i)throw new Error("[useSubscription]: `meta` is required in `params` for graphql subscriptions");if(!o)throw new Error("[useSubscription]: `subscriptionType` is required in `params` for graphql subscriptions");if(!s)throw new Error("[useSubscription]: `resource` is required in `params` for graphql subscriptions");let p=[];if((t==null?void 0:t.subscriptionType)==="useList"){let l=P(r,{callback:e,params:t},"created"),q=P(r,{callback:e,params:t},"updated"),y=P(r,{callback:e,params:t},"deleted");p.push(l),p.push(q),p.push(y)}if((t==null?void 0:t.subscriptionType)==="useOne"){let l=P(r,{callback:e,params:t},"updated");p.push(l)}return()=>{p.forEach(l=>l())}},unsubscribe(e){e()}});var me=z;})();
//# sourceMappingURL=index.js.map